{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".mono { font-family: monospace; } .mono { font-family: monospace; } What is snorer about? \u00b6 snorer , stands for S upernova- N eutrino-b O osted da R k matt ER , is a package for evaluating time-of-flight signatures of supernova-neutrino-boosted dark matter (SN \\(\\nu\\) BDM) from our Milky Way, SN1987a in Large Magellanic Cloud and SN in arbitrary distant galaxy. Citation \u00b6 If you use this package or part of the code in your research, please cite the followings: Y.-H. Lin et al. , Phys. Rev. Lett. 130 , 111002 (2023) [arXiv:2206.06864] Y.-H. Lin et al. , Phys. Rev. D 108 , 083013 (2023) [arXiv:2307.03522] snorer : https://github.com/yenhsunlin/snorer Installation \u00b6 To install, excute the following command on the prompt: $ pip install snorer and everything should be processed on-the-fly. Prerequisites \u00b6 snorer requires python >= 3.8 and the following dependencies: numpy >= 1.20 scipy >= 1.10 vegas >= 6.0 astropy >= 6.0 where vegas is a the backend engine for evaluating multidimensional integrals based on adaptive Monte Carlo vegas algorithm, see for detail. Other dependencies may be required by these packages and will be installed as well. Getting started \u00b6 snorer can be imported like any other packages import snorer as sn # Import snorer functions Assuming the following locations: Distance between Earth and galactic center: \\(R_e=8.5\\) kpc Distance between Earth and SN: \\(R_s=8.5\\) kpc The angle \\(\\beta=0\\) and DM properties: Mass \\(m_\\chi=0.001\\) MeV Kinetic energy \\(T_\\chi=15\\) MeV Evaluating flux \u00b6 Suppose we want to evaluate the BDM flux at \\(t=100\\) seconds after the observation of SN \\(\\nu\\) , then >>> t,Tx,mx,Rstar,beta = 100,15,1e-2,8.5,0 # Collecting parameters >>> flux = sn.flux(t,Tx,mx,Rstar,beta,is_spike=True,neval=15000) # Evaluating flux, 1/MeV/cm^2/s >>> print(flux) 4.572295175982701e-16 The parameter is_spike determines whether DM spike in the central region of the halo is considered and neval dictates how many samples will be generated by vegas in each chain. The default value for DM- \\(\\nu\\) cross section \\(\\sigma_{\\chi\\nu}=10^{-45}\\) cm 2 . See also snorer.flux . Evaluating event \u00b6 Assuming the main target to scatter with BDM in the detector is electron, the following function evaluating the event number per second per electron. The default value for DM- \\(\\nu\\) cross section \\(\\sigma_{\\chi\\nu}=10^{-45}\\) cm 2 but DM- e cross section \\(\\sigma_{\\chi e}\\) is normalized to 1 cm 2 . >>> mx,Rstar,beta = 1e-2,8.5,0.3 # Collecting parameters >>> event = sn.event(mx,Rstar,beta,is_spike=True,neval=30000) # Evaluating BDM event per electron with sigma_xe = 1 cm^2 >>> print(event) 4.6009089186164447e-07 Given the previous setup, event is the event number per electron for \\(\\sigma_{\\chi e}=1\\) cm 2 . Suppose there are \\(N_e\\) electrons in the detector and the true cross sections are \\(\\sigma_{\\chi\\nu}^{\\rm true}\\) and \\(\\sigma_{\\chi e}^{\\rm true}\\) , the total event number in this detector is $$ N_\\chi^{\\rm tot} = \\texttt{event} \\times \\frac{N_e}{1}\\times \\frac{\\sigma_{\\chi e}^{\\rm true}}{1 \\,{\\rm cm^2}} \\times \\frac{\\sigma_{\\chi\\nu}^{\\rm true}}{10^{-45}\\,{\\rm cm^2}}. $$ See also snorer.event . Reporting bug(s) \u00b6 Please report to Yen-Hsun Lin via yenhsun@phys.ncku.edu.tw","title":"Introduction"},{"location":"#what-is-snorer-about","text":"snorer , stands for S upernova- N eutrino-b O osted da R k matt ER , is a package for evaluating time-of-flight signatures of supernova-neutrino-boosted dark matter (SN \\(\\nu\\) BDM) from our Milky Way, SN1987a in Large Magellanic Cloud and SN in arbitrary distant galaxy.","title":"What is snorer about?"},{"location":"#citation","text":"If you use this package or part of the code in your research, please cite the followings: Y.-H. Lin et al. , Phys. Rev. Lett. 130 , 111002 (2023) [arXiv:2206.06864] Y.-H. Lin et al. , Phys. Rev. D 108 , 083013 (2023) [arXiv:2307.03522] snorer : https://github.com/yenhsunlin/snorer","title":"Citation"},{"location":"#installation","text":"To install, excute the following command on the prompt: $ pip install snorer and everything should be processed on-the-fly.","title":"Installation"},{"location":"#getting-started","text":"snorer can be imported like any other packages import snorer as sn # Import snorer functions Assuming the following locations: Distance between Earth and galactic center: \\(R_e=8.5\\) kpc Distance between Earth and SN: \\(R_s=8.5\\) kpc The angle \\(\\beta=0\\) and DM properties: Mass \\(m_\\chi=0.001\\) MeV Kinetic energy \\(T_\\chi=15\\) MeV","title":"Getting started"},{"location":"#reporting-bugs","text":"Please report to Yen-Hsun Lin via yenhsun@phys.ncku.edu.tw","title":"Reporting bug(s)"},{"location":"api/constants/Constants/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.Constants \u00b6 class snorer.Constants() \u00b6 A data class stores many physical constants and coversion factors for convenient use. Attributes: perMeV2cm : float Convert MeV to MeV \u22121 to cm md2MeVperCubicCM : float Convert \\(M_\\odot\\) kpc \u22123 to MeV cm \u22123 year2Seconds : int Convert one year to seconds erg2MeV : int Convert erg to MeV kpc2cm : float Convert kiloparsec to cm me : float Electron mass, MeV mn : float Neutron mass, MeV mp : float Proton mass, MeV Msun : float Solar mass, MeV Msun_kg : float Solar mass, kg Mmw : float Stellar mass in Milky Way, Msun (halo not included) Mhalo : float Dark matter halo mass in Milky Way, Msun Rhalo : float Halo radius, kpc sigma0 : float Constant cross section, cm 2 c : int Speed of light, cm s \u22121 sigma0 : float Constant cross section, cm 2 H0 : float Hubble constant, km Mpc \u22121 s \u22121 rho_c : float Critical densityt \\(\\rho_c\\) in cosmology, \\(M_\\odot\\) pc \u22123 Lv : float Neutrino luminosity, divided by 10 seconds, for single species, total six (3 \\(\\nu\\) and 3 \\(\\bar{\\nu}\\) ), erg s \u22121 Omega_0m : float Cosmological matter fraction Omega_0L : float Cosmological dark energy fraction Omega_0r : float Cosmological radiation fraction Omega_0 : float Cosmological total energy, 1 D_H0 : float Cosmological distance, Mpc G : float Gravitational constant, pc \\(M_\\odot^{-1}\\) kms 2 s \u22121 SgrA_coord : list Sagittarius A* coordinate and distance, [ str , str , float ] = [RAC,DEC,kpc] LMC_coord : list Coordinate for Large Magellanic Cloud center and distance, [ str , str , float ] = [RAC,DEC,kpc] SN1987a_coord : list SN1987a coordinate and distance, [ str , str , float ] = [RAC,DEC,kpc] Examples Import snorer and do >>> import snorer as sn >>> sn.Constants().perMeV2cm # Convert 1/MeV to cm 1.973e-11 >>> sn.Constants().SgrA_coord # Sgr A J2000 coordinate and its distance in kpc ['17h45m40.0383s', '-29d00m28.069s', 8.13] For simplicity, one can also call the constants and conversion factors by >>> sn.constant.perMeV2cm 1.973e-11 Both Constants and constant are equivalent and is related by constant = Constants() .","title":"Constants"},{"location":"api/constants/Constants/#snorerconstants","text":"","title":"snorer.Constants"},{"location":"api/geometry/Geometry/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.Geometry \u00b6 class snorer.Geometry( l , theta , phi , Rs , Re , beta ) \u00b6 The class constructs the static geomatrical relations for \\(d\\) , \\(r^\\prime\\) and \\(\\cos\\psi\\) when \\((l,\\theta,\\phi)\\) and \\((R_s,R_e,\\beta)\\) are specified. See Positioning for more detail. Parameters: l : float The line-of-sight distance \\(\\ell\\) , kpc theta : float The zenith angle \\(\\theta\\) at Earth, centers SN, rad phi : float Azimuthal angle \\(\\varphi\\) at Earth, centers SN, rad Rs : float Distance from Earth to SN \\(R_s\\) , kpc Re : float Distance from Earth to GC \\(R_e\\) , kpc beta : float Off-center angle \\(\\beta\\) , rad Attributes: d : float Distance from SN to boost point \\(d\\) , kpc rprime : float Distance from GC to boost point \\(r^\\prime\\) , kpc cos_psi : float \\(\\cos\\psi\\) at boost point where \\(\\psi\\) is the direction for BDM at B pointing Earth Examples Import snorer and do >>> l,theta,phi,Rs,Re,beta = 5.160e-9,1e-4,0,11.6,8.5,0.71 # specify quantities >>> bdmGeo = Geometry(l,theta,phi,Rs,Re,beta) >>> print(bdmGeo.d) # SN to boost point 11.59999999483988 >>> print(bdmGeo.rprime) # GC to boost point 8.49999999608676 >>> print(bdmGeo.cos_psi) # cos(psi) 0.9999999721078604","title":"Geometry"},{"location":"api/geometry/Geometry/#snorergeometry","text":"","title":"snorer.Geometry"},{"location":"api/geometry/Positioning/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; Positioning \u00b6 To position the BDM signals, cf. Fig. 1 in BDM Physics , we have to analyze the geometry of propagation in order to get how large the emissivity is at B. Once the geometrical relations are understood, we can proceed to construct a class that solve this matter on-the-fly. See also Ref. [ 1 ] and note that we slightly modify the notations in this document for transparency. Geometry \u00b6 We replot Fig. 1 in BDM Physics and leaves only relevant information in the following Fig. 1 . Three coplanar points S, G and E remained the same. Repeated quantities are the same while we also mark addditional auxiliary terms which their purposes will be clear soon. Figure 1. The geometry of BDM propagation. By examining the blue and green triangles, we have \\[ \\begin{align} h &= \\ell \\sin\\theta \\\\ b &= \\ell \\cos\\theta. \\end{align} \\] Moreover, blue and brown triangles are identical, as brown one simply rotates around axis \\(\\overline{\\mathsf{SE}}\\) by \\(\\varphi\\) . See Fig. 2 . Figure 2. Blue and brown triangles are identical. Suppose B is distant \\(r\\) away from G, then B\u2032 is \\(r^\\prime\\) . It says that \\(r\\) is a special case of \\(r^\\prime\\) when \\(\\varphi=0\\) . This is curcial that when SN is not at the GC, DM number density \\(n_\\chi\\) is not spherical symmetric relative to SN. To resolve the correct \\(j_\\chi\\) at boost point, one needs to know \\(n_\\chi(r^\\prime(\\varphi))\\) . Figure 3. Another set of auxiliary triangles. We draw another set of auxiliary triangles in Fig. 3 , also cf. Fig. 1 , and immediately see that, left figure, \\[ \\begin{equation}\\label{eq:rprime} r^{\\prime2} = a^2 + h^2\\cos^2\\varphi \\end{equation} \\] while \\[ \\begin{equation} a^2 = (\\rho\\sin\\delta - h\\sin\\varphi)^2 + \\rho^2\\cos^2\\delta \\end{equation} \\] and, from law of cosine, the right figure gives, \\[ \\begin{equation} \\rho = \\sqrt{b^2+R_e^2 - 2b R_e \\cos\\beta}. \\end{equation} \\] To determine \\(\\delta\\) , we apply law of cosine (cause we need to know whether \\(\\delta> \\pi/2\\) or not) on right figure, \\[ R_e^2 =\\rho^2 + b^2 - 2\\rho b \\cos(\\pi-\\delta) \\] which yields \\[ \\begin{equation} \\cos\\delta =\\frac{R_e^2-\\rho^2-b^2}{2\\rho b} \\end{equation} \\] One can check that we already determine \\(r^\\prime\\) , Eq. \\(\\eqref{eq:rprime}\\) , by known quantities \\((d,\\ell,\\theta,\\varphi)\\) and \\((R_s,R_e,\\beta)\\) . The first set will be specified during evaluating BDM signatures and the second set of parameters gives the SN location. Last thing to be calculated is the scattering angle \\(\\psi\\) , which can be easily obtained by law of cosine again, \\[ R_s^2 = d^2 + \\ell^2 -2d \\ell \\cos(\\pi-\\psi) \\] such that \\[ \\begin{equation} \\cos\\psi = \\frac{R_s^2-d^2-\\ell^2}{2d\\ell} \\end{equation} \\] where $$ \\begin{equation}\\label{eq:d} d = \\sqrt{\\ell^2 + R_s^2 - 2\\ell R_s\\cos\\theta}. \\end{equation} $$ This indicates that \\(d\\) is not an independent quantity but subject to \\(\\ell\\) and \\(\\theta\\) . Static to time-dependent \u00b6 From Eq. (15) in BDM Physics and offseting it by \\(t_\\nu=R_s/c\\) , we have \\[ t = \\frac{d}{c} + \\frac{\\ell}{v_\\chi}- t_\\nu \\] hence \\[ \\begin{equation}\\label{eq:t_dependent} d + \\frac{\\ell}{\\beta_\\chi} = R_s + ct. \\end{equation} \\] where \\(\\beta_\\chi = v_\\chi/c\\) . For convenience, we define \\[ \\begin{equation} \\zeta(t) := R_s + ct \\end{equation} \\] and plug Eq. \\(\\eqref{eq:d}\\) into Eq. \\(\\eqref{eq:t_dependent}\\) and solve for \\(\\ell\\) , $$ \\begin{equation}\\label{eq:ell_t} \\ell(t) = -\\frac{\\beta_\\chi}{1-\\beta^2_\\chi}\\left(\\alpha + \\gamma-\\zeta \\right). \\end{equation} $$ where \\[ \\begin{align*} \\alpha &= \\sqrt{(R_s^2-\\zeta^2)(1-\\beta_\\chi^2)+(R_s\\beta_\\chi\\cos\\theta-\\zeta)^2},\\\\ \\gamma &= R_s\\beta_\\chi\\cos\\theta. \\end{align*} \\] We now can determine \\(\\ell\\) at any time \\(t\\) from Eq. \\(\\eqref{eq:ell_t}\\) and \\(d\\) is also subject to the change of \\(\\ell\\) when \\(\\theta\\) is specified.. The geometry for BDM becomes time-dependent from a static profile. References \u00b6 Y.-H. Lin et al. , Phys. Rev. D. 108 , 083013 (2023)","title":"Positioning"},{"location":"api/geometry/Positioning/#positioning","text":"To position the BDM signals, cf. Fig. 1 in BDM Physics , we have to analyze the geometry of propagation in order to get how large the emissivity is at B. Once the geometrical relations are understood, we can proceed to construct a class that solve this matter on-the-fly. See also Ref. [ 1 ] and note that we slightly modify the notations in this document for transparency.","title":"Positioning"},{"location":"api/geometry/Positioning/#geometry","text":"We replot Fig. 1 in BDM Physics and leaves only relevant information in the following Fig. 1 . Three coplanar points S, G and E remained the same. Repeated quantities are the same while we also mark addditional auxiliary terms which their purposes will be clear soon. Figure 1. The geometry of BDM propagation. By examining the blue and green triangles, we have \\[ \\begin{align} h &= \\ell \\sin\\theta \\\\ b &= \\ell \\cos\\theta. \\end{align} \\] Moreover, blue and brown triangles are identical, as brown one simply rotates around axis \\(\\overline{\\mathsf{SE}}\\) by \\(\\varphi\\) . See Fig. 2 . Figure 2. Blue and brown triangles are identical. Suppose B is distant \\(r\\) away from G, then B\u2032 is \\(r^\\prime\\) . It says that \\(r\\) is a special case of \\(r^\\prime\\) when \\(\\varphi=0\\) . This is curcial that when SN is not at the GC, DM number density \\(n_\\chi\\) is not spherical symmetric relative to SN. To resolve the correct \\(j_\\chi\\) at boost point, one needs to know \\(n_\\chi(r^\\prime(\\varphi))\\) . Figure 3. Another set of auxiliary triangles. We draw another set of auxiliary triangles in Fig. 3 , also cf. Fig. 1 , and immediately see that, left figure, \\[ \\begin{equation}\\label{eq:rprime} r^{\\prime2} = a^2 + h^2\\cos^2\\varphi \\end{equation} \\] while \\[ \\begin{equation} a^2 = (\\rho\\sin\\delta - h\\sin\\varphi)^2 + \\rho^2\\cos^2\\delta \\end{equation} \\] and, from law of cosine, the right figure gives, \\[ \\begin{equation} \\rho = \\sqrt{b^2+R_e^2 - 2b R_e \\cos\\beta}. \\end{equation} \\] To determine \\(\\delta\\) , we apply law of cosine (cause we need to know whether \\(\\delta> \\pi/2\\) or not) on right figure, \\[ R_e^2 =\\rho^2 + b^2 - 2\\rho b \\cos(\\pi-\\delta) \\] which yields \\[ \\begin{equation} \\cos\\delta =\\frac{R_e^2-\\rho^2-b^2}{2\\rho b} \\end{equation} \\] One can check that we already determine \\(r^\\prime\\) , Eq. \\(\\eqref{eq:rprime}\\) , by known quantities \\((d,\\ell,\\theta,\\varphi)\\) and \\((R_s,R_e,\\beta)\\) . The first set will be specified during evaluating BDM signatures and the second set of parameters gives the SN location. Last thing to be calculated is the scattering angle \\(\\psi\\) , which can be easily obtained by law of cosine again, \\[ R_s^2 = d^2 + \\ell^2 -2d \\ell \\cos(\\pi-\\psi) \\] such that \\[ \\begin{equation} \\cos\\psi = \\frac{R_s^2-d^2-\\ell^2}{2d\\ell} \\end{equation} \\] where $$ \\begin{equation}\\label{eq:d} d = \\sqrt{\\ell^2 + R_s^2 - 2\\ell R_s\\cos\\theta}. \\end{equation} $$ This indicates that \\(d\\) is not an independent quantity but subject to \\(\\ell\\) and \\(\\theta\\) .","title":"Geometry"},{"location":"api/geometry/Positioning/#static-to-time-dependent","text":"From Eq. (15) in BDM Physics and offseting it by \\(t_\\nu=R_s/c\\) , we have \\[ t = \\frac{d}{c} + \\frac{\\ell}{v_\\chi}- t_\\nu \\] hence \\[ \\begin{equation}\\label{eq:t_dependent} d + \\frac{\\ell}{\\beta_\\chi} = R_s + ct. \\end{equation} \\] where \\(\\beta_\\chi = v_\\chi/c\\) . For convenience, we define \\[ \\begin{equation} \\zeta(t) := R_s + ct \\end{equation} \\] and plug Eq. \\(\\eqref{eq:d}\\) into Eq. \\(\\eqref{eq:t_dependent}\\) and solve for \\(\\ell\\) , $$ \\begin{equation}\\label{eq:ell_t} \\ell(t) = -\\frac{\\beta_\\chi}{1-\\beta^2_\\chi}\\left(\\alpha + \\gamma-\\zeta \\right). \\end{equation} $$ where \\[ \\begin{align*} \\alpha &= \\sqrt{(R_s^2-\\zeta^2)(1-\\beta_\\chi^2)+(R_s\\beta_\\chi\\cos\\theta-\\zeta)^2},\\\\ \\gamma &= R_s\\beta_\\chi\\cos\\theta. \\end{align*} \\] We now can determine \\(\\ell\\) at any time \\(t\\) from Eq. \\(\\eqref{eq:ell_t}\\) and \\(d\\) is also subject to the change of \\(\\ell\\) when \\(\\theta\\) is specified.. The geometry for BDM becomes time-dependent from a static profile.","title":"Static to time-dependent"},{"location":"api/geometry/Propagation/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.Propagation \u00b6 class snorer.Propagation( t , vx , theta , phi , Rs , Re , beta ) \u00b6 Superclass: snorer.Geometry The class constructs the dynamical geomatrical relations for \\(d\\) , \\(r^\\prime\\) and \\(\\cos\\psi\\) when \\((l,\\theta,\\phi)\\) and \\((R_s,R_e,\\beta)\\) are specified. Unlike its superclass Geometry, the class parameter l is now replaced by a specific time t and dimensionless BDM velocity vx . This allows it to incorporate time-dependent feature when evaluating the geometrical quantities during propagation. This class is also not exclusively for SN in MW or LMC, it can be generalized to SN in arbitrary distant galaxy as long as the aforementioned inputs are determined. The BDM emissivity along the line-of-sight then can be determined when calculate the BDM flux and event at Earth associated to that particular SN. See Positioning for more detail. Parameters: t : float The BDM at specific time \\(t\\) , seconds. Time-zero is set to be the arrival of SN \\(\\nu\\) at Earth vx : float BDM dimesionless velocity \\(v_\\chi/c\\) theta : float The zenith angle \\(\\theta\\) at Earth, centers SN, rad phi : float Azimuthal angle \\(\\varphi\\) at Earth, centers SN, rad Rs : float Distance from Earth to SN \\(R_s\\) , kpc Re : float Distance from Earth to GC \\(R_e\\) , kpc beta : float Off-center angle \\(\\beta\\) , rad Attributes: l : float The line-of-sight distance \\(\\ell\\) , kpc d : float Distance from SN to boost point \\(d\\) , kpc rprime : float Distance from GC to boost point \\(r^\\prime\\) , kpc cos_psi : float \\(\\cos\\psi\\) at boost point where \\(\\psi\\) is the direction for BDM at B pointing Earth Examples Import snorer and do >>> bdmProp = Propagation(t=59,vx=0.9,theta=1e-4,phi=0,Rs=11.6,Re=8.5,beta=0.71) >>> print(bdmProp.l) # The corresponding l.o.s. distance 5.160120751743069e-09 >>> print(bdmProp.d) # The distace from SN to boost point 11.59999999483988 >>> print(bdmProp.rprime) # The distance from GC to boost point 8.49999999608676 >>> print(bdmProp.cos_psi) # Scattering angle that points Earth at B 1.0","title":"Propagation"},{"location":"api/geometry/Propagation/#snorerpropagation","text":"","title":"snorer.Propagation"},{"location":"api/halo/HaloSpike/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.HaloSpike \u00b6 class snorer.HaloSpike( mBH , tBH , alpha ) \u00b6 Superclass: snorer.Constants Class for constructing dark matter halo with spike due to supermassive black hole (SMBH) in the galactic center. Parameters: mBH : float SMBH mass, \\(M_\\odot\\) tBH : float SMBH age, years alpha : str Slope of the spike profile, only '3/2' or '7/3' is acceptable Attributes: mBH : float SMBH mass, user's input tBH : float SMBH age, user's input alpha : obj Slope of the spike profile, user's input and is a Fraction object rh : float SMBH influence radius \\(r_h\\) , kpc Rsp : float Spike radius \\(R_{\\rm sp}\\) , kpc __call__ ( r , mx , sigv , rhos , rs , n ) \u00b6 After initializing snorer.HaloSpike instance, it is callable like normal function with the following required inputs. Parameters: r : float Distance to GC, kpc mx : float DM mass, MeV sigv : float DM annihilation cross section \\(\\langle\\sigma v\\rangle\\) in the unit of cm 3 s \u22121 . None means no annihilation rhos : float Charasteristic density \\(\\rho_s\\) , MeV s \u22123 rs : float Characteristic radius \\(r_s\\) , kpc n : float Slope of the DM profile outside \\(R_{\\rm sp}\\) Returns: out : scalar DM number density at \\(r\\) , cm \u22123 Examples Initializing instance and check its attributes. >>> import snorer as sn >>> nx = sn.HaloSpike(mBH=1e7,tBH=1e10,alpha='3/2') # initializing instance >>> nx # print instance information SMBH mass: 1.000e+07 M_sun Spike slope: 3/2 Initial slope: 1.000e+00 Spike radius: 9.504e-10 kpc Influence radius: 3.412e-03 kpc >>> nx.alpha # check alpha Fraction(3,2) The influence radius \\(r_h\\) is auto generated but can be replaced by user defined number. It can be reset to the default value by giving None . >>> nx.rh # default value of rh 0.003411783398329804 >>> nx.rh = 2.54e-3 # replace rh with user-defined value >>> nx.rh 2.54e-03 >>> nx.rh = None # reset it to the default value >>> nx.rh 0.003411783398329804 Make it a callable function that can calculate DM number density at different \\(r\\) . import numpy as np import matplotlib.pyplot as plt import snorer as sn # Get MW rhos, rs, n, mBH and rh rhos,rs,n,mBH,rh = constant.MW_profile.values() # Assuming BH age is 1 Gyr tBH = 1e10 # DM mass, MeV mx = 0.1 # Annihilation cross section sigv_list = [3,0.03,None] sigv_label = ['3','0.03','0'] # Initializing instances with two different alphas nx = HaloSpike(mBH=mBH,tBH=tBH,alpha='3/2') # alpha = 3/2 # radius, kpc r_vals = np.logspace(-5,2,100) for i in range(3): sigv = sigv_list[i] nx_vals = [nx(r,mx,sigv,rhos,rs,n) for r in r_vals] plt.plot(r_vals,nx_vals,label=sigv_label[i] + r'$\\times10^{-26}\\,{\\rm cm^3~s^{-1}}$') plt.xscale('log') plt.yscale('log') plt.xlabel(r'$r$ [kpc]') plt.ylabel(r'$n_\\chi(r)$ [cm$^{-3}$]') plt.title(fr'$m_\\chi = {mx:.1f}$ MeV') plt.legend() plt.show() References \u00b6 P. Gondolo and J. Silk, Phys. Rev. Lett. 83 , 1719 (1999) J. Cline and M. Puel, JCAP 06 , 004 (2023)","title":"HaloSpike"},{"location":"api/halo/HaloSpike/#snorerhalospike","text":"","title":"snorer.HaloSpike"},{"location":"api/halo/M_sigma/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.M_sigma \u00b6 snorer.M_sigma( mBH ) \u00b6 Stellar dispersion relation under the influence of black hole. Also known as \\(M-\\sigma\\) relation. Parameters: mBH : array_like Supermassive black hole mass, \\(M_\\odot\\) Returns: out : scalar/ndarray Stellar velocity dispersion, km s \u22121 . Out is scalar if the input is scalar too. Notes This function evaluates the stellar dispersion \\(\\sigma_s\\) near supermassive black hole $$ \\log_{10}\\left(\\frac{M_{\\rm BH}}{M_\\odot}\\right) = 8.29 + 5.12\\log_{10}\\left(\\frac{\\sigma_s}{200\\,{\\rm km\\,s^{-1}}}\\right). $$ References \u00b6 N. McConnell et al. , Nature 480 , 215 (2011)","title":"M_sigma"},{"location":"api/halo/M_sigma/#snorerm_sigma","text":"","title":"snorer.M_sigma"},{"location":"api/halo/nx/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.nx \u00b6 snorer.nx( r , mx , profile='MW' ) \u00b6 Dark matter number density of Milky Way of Large Magellanic Cloud at distance \\(r\\) to the galactic center. Spike feature is not included. Parameters: r : array_like Distance to galactic center \\(r\\) , kpc mx : array_like Dark matter mass, MeV profile : str 'MW' or 'LMC' , stands for MW halo or LMC halo Returns: out : scalar/ndarray Dark matter number density at \\(r\\) , cm \u22123 Examples Let's plot \\(n_\\chi(r)\\) for different profiles. import numpy as np import matplotlib.pyplot as plt import snorer as sn # DM mass, keV mx = 0.01 # radius, kpc r_vals = np.logspace(-3,2,100) # profiles profiles = ['MW','LMC'] # Make plot for profile in profiles: nx_vals = nx(r_vals,mx,profile=profile) plt.plot(r_vals,nx_vals,label=profile) plt.xscale('log') plt.yscale('log') plt.xlabel(r'$r$ [kpc]') plt.ylabel(r'$n_\\chi(r)$ [cm$^{-3}$]') plt.title(fr'$m_\\chi = {mx:.2f}$ MeV') plt.legend() plt.show() Notes Number density is just density divided by mass, $$ n_\\chi(r)=\\frac{\\rho_\\chi(r)}{m_\\chi}. $$ See also snorer.rhox .","title":"nx"},{"location":"api/halo/nx/#snorernx","text":"","title":"snorer.nx"},{"location":"api/halo/nxSpike/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.nxSpike \u00b6 snorer.nxSpike( r , mx , profile='MW' , sigv=None , tBH=1e+10 , alpha='3/2' ) \u00b6 Dark matter number density of Milky Way of Large Magellanic Cloud at distance \\(r\\) to the galactic center. Spike feature is included. Parameters: r : array_like Distance to galactic center, kpc mx : array_like Dark matter mass, MeV profile : str 'MW' or 'LMC' , stands for MW halo or LMC halo sigv : scalar DM annihilation cross section, in the unit of \\(10^{-26}\\) cm 3 s \u22121 . None indicates no annihilation tBH : float Supermassive black hole age, years alpha : str Slope of the spike, '3/2' or '7/3' Returns: out : scalar/ndarray Dark matter number density at r with spike in the center, cm \u22123 Examples Let's plot \\(n_\\chi\\) for different \\(\\langle \\sigma v\\rangle\\) . import numpy as np import matplotlib.pyplot as plt import snorer as sn # DM mass, keV mx = 0.01 # radius, kpc r_vals = np.logspace(-5,2,100) # profiles sigv_vals = [None,0.01,0.1,3] for sigv in sigv_vals: # calculate nx nx_vals = nxSpike(r_vals,mx,sigv=sigv,profile='LMC') if sigv is None: sigv = 0 # legend label plt.plot(r_vals,nx_vals,label=r'$\\langle\\sigma v\\rangle=$' + str(sigv)) plt.xscale('log') plt.yscale('log') plt.xlabel(r'$r$ [kpc]') plt.ylabel(r'$n_\\chi(r)$ [cm$^{-3}$]') plt.title(fr'LMC with spike and $m_\\chi = {mx:.2f}$ MeV') plt.legend() plt.show() Notes To realize \\(n_\\chi\\) with spike feature we initialized a snorer.HaloSpike instance inside the function snorer.nxSpike and utilize the callable feature. However, such callable function does not support vectorization. To mimic vectorized inputs/outputs, we employ numpy.nditer . It could become clumsy if the points to be calculated are massive.","title":"nxSpike"},{"location":"api/halo/nxSpike/#snorernxspike","text":"","title":"snorer.nxSpike"},{"location":"api/halo/radiusInfluence/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.radiusInfluence \u00b6 snorer.radiusInfluence( mBH ) \u00b6 Influence radius of a supermassive black hole Parameters: mBH : array_like Supermassive black hole mass, \\(M_\\odot\\) Returns: out : scalar/ndarray Influence radisu, kpc. Out is scalar if the input is scalar. Notes This function evaluates the influence radius of a supermassive black hole $$ r_h = \\frac{GM_{\\rm BH}}{\\sigma_s^2} $$ where sigma_s is the stellar dispersion near SMBH. See also snorer.M_sigma .","title":"radiusInfluence"},{"location":"api/halo/radiusInfluence/#snorerradiusinfluence","text":"","title":"snorer.radiusInfluence"},{"location":"api/halo/radiusSchwarzschild/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.radiusSchwarzschild \u00b6 snorer.radiusSchwarzschild( mBH ) \u00b6 Schawarzschild radius of a supermassive black hole. Parameters: mBH : array_like Supermassive black hole mass, \\(M_\\odot\\) Returns: out : scalar/ndarray Schwarzschild radius, kpc. Out is scalar if the input is scalar.","title":"radiusSchwarzschild"},{"location":"api/halo/radiusSchwarzschild/#snorerradiusschwarzschild","text":"","title":"snorer.radiusSchwarzschild"},{"location":"api/halo/rhox/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.rhox \u00b6 snorer.rhox( r , rhos , rs , n ) \u00b6 Dark matter density at \\(r\\) . Parameters: r : array_like Distance to GC, kpc rhos : array_like Characteristic density \\(\\rho_s\\) , MeV cm \u22123 rs : array_like Characteristic radius \\(r_s\\) , kpc n : array_like Slope of the DM profile Returns: out : scalar/ndarray DM density at \\(r\\) , MeV cm \u22123 . Out is scalar if all inputs are scalars Notes This function evaluates the DM density profile $$ \\rho_\\chi(r)=\\frac{\\rho_s}{\\frac{r}{r_s}(1+\\frac{r}{r_s})^n} $$ where rhos and rs are characteristic density and radius respectively. When \\((\\rho_s,r_s,n) =\\) (184 MeV cm \u22123 , 24.42 kpc, 2), it is the famous NFW profile. If divided by \\(m_\\chi\\) , it becomes DM number density. References \u00b6 G. Bertone et al. , Phys. Rept. 405 , 279 (2005)","title":"rhox"},{"location":"api/halo/rhox/#snorerrhox","text":"","title":"snorer.rhox"},{"location":"api/kinematics/22scat/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; 2-2 elastic scattering \u00b6 We have reviewed the 2-2 elastic scattering with one is massless neutrino in BDM Physics . In order to facilitate a broader case, we relax the massless assumption and do not identitfy them as any particle species. This aids us to build an independent class that is suitable for any 2-2 scattering with non-zero masses. General expressions \u00b6 The scheme for scattering of two particles, labeled 1 and 2, is shown in Fig. 1 . Each particle carries non-zero mass \\(m_1\\) and \\(m_2\\) respectively. Four-momenta for evary particles are shown on the sides. The scattering angle measures the degrees of deflection relative to the incoming direction of particle 1. After scattering, particles 1 and 2 have scattering angles \\(\\vartheta\\) and \\(\\psi\\) respectively. Figure 1. The 2-2 particle scattering in lab frame. We can write down the 4-momenta in lab frame, \\[ \\begin{align*} p_1 = (E_1,\\mathbf{p}_1),&\\quad p_2 = (m_2,\\mathbf{0}),\\\\ p_1^{\\prime} = (E_1^\\prime,\\mathbf{p}_1^\\prime),&\\quad p_2^{\\prime} = (E_2^\\prime,\\mathbf{p}_2^\\prime), \\end{align*} \\] and the corresponding \\(u\\) -channel \\[ \\begin{gather*} (p_1-p_2^\\prime)^2 = m_1^2+m_2^2-2E_1E_2^\\prime +2 |\\mathbf{p}_1| |\\mathbf{p}_2^\\prime| \\cos\\psi,\\\\ (p_2-p_1^\\prime)^2 = m_1^2+m_2^2 - 2 E_1^\\prime m_2. \\end{gather*} \\] The two identities are equivalent due to Lorentz invariant nature. Similar to the BDM case, suppose we know \\(E_2^\\prime\\) and its kinetic energy such that $$ T_2 = E^\\prime_2 - m_2 = E_1 - E_1^\\prime. $$ We thus have $$ \\begin{equation} E_1 (T_2+m_2) -|\\mathbf{p}_1||\\mathbf{p}_2^\\prime| x = (E_1-T_2)m_2, \\end{equation} $$ where \\(x:= \\cos\\psi\\) . By letting \\(|\\mathbf{p}_1|=\\sqrt{E_1^2-m_1^2}\\) and \\(|\\mathbf{p}_2^\\prime| =\\sqrt{T_2(T_2+2m_2)}\\) , the only unknown in the above equation is \\(E_1\\) , which can be solved analytically, \\[ \\begin{equation}\\label{eq:E1} E_1=\\frac{T_2^2 m_2 + |\\mathbf{p}_2^\\prime|x\\sqrt{m_1^2 |\\mathbf{p}_2^\\prime|^2 x^2 + T_2^2 (m_2^2-m_1^2)}}{|\\mathbf{p}_2^\\prime|^2 x^2 - T_2^2}. \\end{equation} \\] Note the \\(E_1\\) gives the total energy of particle 1, thus \\(T_1=E_1 - m_1\\) . It is true that \\(E_1 = T_1\\) only when \\(m_1=0\\) . Moreover, one can differentiate \\(E_1\\) w.r.t. \\(T_2\\) and it yields $$ \\begin{equation}\\label{eq:dE1/dT2} \\frac{dE_1}{dT_2}=m_2x^2\\times \\frac{\\alpha +\\beta + \\gamma}{\\eta} \\end{equation} $$ where \\[ \\begin{align*} \\alpha &= m_1^2 \\delta, \\\\ \\beta & = m_2^2 (2T_2+\\delta),\\\\ \\gamma &= 2m_2 x \\kappa,\\\\ \\eta &= \\delta^2 x \\kappa, \\end{align*} \\] with \\(\\delta=-T_2 + (T_2 + 2m_2)x^2\\) and \\(\\kappa=\\sqrt{(T_2+2m_2)(\\alpha+ T_2 m_2^2 )}\\) . In most of the situations, elastic scattering does not change particle mass, thus $$ \\begin{equation} \\frac{dE_1}{dT_2} = \\frac{d}{dT_2}(T_1 + m_1) = \\frac{dT_1}{dT_2} \\end{equation} $$ and this allows to express every quantities in terms of kinetic energies \\(T_i\\) . When we construct the corresponding class , the namespace will always refers to \\(T_i\\) instead of \\(E_i\\) . Though the angle \\(\\vartheta\\) for particle 1 is irrelevant to our study, we can still determine it by 3-momentum conservation, $$ \\begin{equation} \\vartheta =\\sin^{-1}\\left( \\frac{|\\mathbf{p}_2^\\prime|}{|\\mathbf{p}_1^\\prime|}\\sin\\psi\\right) \\end{equation} $$ where \\(|\\mathbf{p_1^\\prime}|=\\sqrt{E_1^{\\prime 2}-m_1^2}\\) and \\(E_1^\\prime = E_1-T_2\\) . Validation \u00b6 Now recall the \\(\\nu\\chi\\) scattering with \\(E_1=E_\\nu\\) , \\(T_2=T_\\chi\\) , \\(m_1=m_\\nu=0\\) and \\(m_2=m_\\chi\\) . With \\(|\\mathbf{p}_2^\\prime|=|\\mathbf{p}_\\chi|=\\sqrt{T_\\chi(T_\\chi+m_\\chi)}\\) , Eq. \\(\\eqref{eq:E1}\\) becomes \\[ \\begin{equation}\\label{eq:Ev} E_\\nu = T_\\chi m_\\chi \\frac{T_\\chi + |\\mathbf{p}_\\chi|x }{( |\\mathbf{p}_\\chi|x-T_\\chi)(|\\mathbf{p}_\\chi|x+T_\\chi)}=\\frac{T_\\chi m_\\chi}{|\\mathbf{p}_\\chi|x-T_\\chi}. \\end{equation} \\] Additionally, \\[ \\begin{align*} \\alpha &= 0, \\\\ \\beta & = m_\\chi^2 (T_\\chi+(T_\\chi +2m_\\chi)x^2),\\\\ \\gamma &= 2m_\\chi^2 |\\mathbf{p}_\\chi|x,\\\\ \\eta &= \\delta^2 m_\\chi |\\mathbf{p}_\\chi|x , \\end{align*} \\] and with some tedious math one obtains \\[ \\begin{align*} m_\\chi x^2\\frac{\\alpha+\\beta+\\gamma}{\\eta}&= \\frac{x}{\\delta^2}\\frac{m_\\chi^2}{|\\mathbf{p}_\\chi|}(T_\\chi+(T_\\chi+2m_\\chi)x^2+2|\\mathbf{p}_\\chi|x) \\\\ &=\\frac{x}{\\delta^2}\\frac{m_\\chi^2}{|\\mathbf{p}_\\chi|}\\left(T_\\chi +\\frac{|\\mathbf{p}_\\chi|^2}{T_\\chi}x^2+2|\\mathbf{p}_\\chi|x\\right)\\\\ & = \\frac{x}{\\delta^2}\\frac{m_\\chi^2}{|\\mathbf{p}_\\chi|} \\frac{(T_\\chi + |\\mathbf{p}_\\chi|x)^2}{T_\\chi } \\end{align*} \\] we further use \\[ \\begin{align*} \\delta^2 & =\\left(-T_\\chi + \\frac{|\\mathbf{p}_\\chi|^2}{T_\\chi}x^2\\right)^2=\\frac{(|\\mathbf{p}_\\chi|^2x^2 - T_\\chi^2)^2}{T_\\chi^2}\\\\ &= \\frac{(|\\mathbf{p}_\\chi|x - T_\\chi)^2(|\\mathbf{p}_\\chi|x + T_\\chi)^2}{T_\\chi^2} \\end{align*} \\] then finally reaches \\[ \\begin{equation}\\label{eq:dEv/dTx} m_\\chi x^2\\frac{\\alpha+\\beta+\\gamma}{\\eta}=\\left(\\frac{m_\\chi}{|\\mathbf{p}_\\chi|x - T_\\chi}\\right)^2\\frac{T_\\chi}{|\\mathbf{p}_\\chi|}x = \\frac{dE_\\nu}{dT_\\chi}. \\end{equation} \\] We discover that Eqs. \\(\\eqref{eq:Ev}\\) and \\(\\eqref{eq:dEv/dTx}\\) are exactly Eqs. (5) and (8) in BDM Physics respectively. Thus conclude that Eqs. \\(\\eqref{eq:E1}\\) and \\(\\eqref{eq:dE1/dT2}\\) are the general expressions for massive 2-2 elastic scattering.","title":"2-2 elastic scattering"},{"location":"api/kinematics/22scat/#2-2-elastic-scattering","text":"We have reviewed the 2-2 elastic scattering with one is massless neutrino in BDM Physics . In order to facilitate a broader case, we relax the massless assumption and do not identitfy them as any particle species. This aids us to build an independent class that is suitable for any 2-2 scattering with non-zero masses.","title":"2-2 elastic scattering"},{"location":"api/kinematics/22scat/#general-expressions","text":"The scheme for scattering of two particles, labeled 1 and 2, is shown in Fig. 1 . Each particle carries non-zero mass \\(m_1\\) and \\(m_2\\) respectively. Four-momenta for evary particles are shown on the sides. The scattering angle measures the degrees of deflection relative to the incoming direction of particle 1. After scattering, particles 1 and 2 have scattering angles \\(\\vartheta\\) and \\(\\psi\\) respectively. Figure 1. The 2-2 particle scattering in lab frame. We can write down the 4-momenta in lab frame, \\[ \\begin{align*} p_1 = (E_1,\\mathbf{p}_1),&\\quad p_2 = (m_2,\\mathbf{0}),\\\\ p_1^{\\prime} = (E_1^\\prime,\\mathbf{p}_1^\\prime),&\\quad p_2^{\\prime} = (E_2^\\prime,\\mathbf{p}_2^\\prime), \\end{align*} \\] and the corresponding \\(u\\) -channel \\[ \\begin{gather*} (p_1-p_2^\\prime)^2 = m_1^2+m_2^2-2E_1E_2^\\prime +2 |\\mathbf{p}_1| |\\mathbf{p}_2^\\prime| \\cos\\psi,\\\\ (p_2-p_1^\\prime)^2 = m_1^2+m_2^2 - 2 E_1^\\prime m_2. \\end{gather*} \\] The two identities are equivalent due to Lorentz invariant nature. Similar to the BDM case, suppose we know \\(E_2^\\prime\\) and its kinetic energy such that $$ T_2 = E^\\prime_2 - m_2 = E_1 - E_1^\\prime. $$ We thus have $$ \\begin{equation} E_1 (T_2+m_2) -|\\mathbf{p}_1||\\mathbf{p}_2^\\prime| x = (E_1-T_2)m_2, \\end{equation} $$ where \\(x:= \\cos\\psi\\) . By letting \\(|\\mathbf{p}_1|=\\sqrt{E_1^2-m_1^2}\\) and \\(|\\mathbf{p}_2^\\prime| =\\sqrt{T_2(T_2+2m_2)}\\) , the only unknown in the above equation is \\(E_1\\) , which can be solved analytically, \\[ \\begin{equation}\\label{eq:E1} E_1=\\frac{T_2^2 m_2 + |\\mathbf{p}_2^\\prime|x\\sqrt{m_1^2 |\\mathbf{p}_2^\\prime|^2 x^2 + T_2^2 (m_2^2-m_1^2)}}{|\\mathbf{p}_2^\\prime|^2 x^2 - T_2^2}. \\end{equation} \\] Note the \\(E_1\\) gives the total energy of particle 1, thus \\(T_1=E_1 - m_1\\) . It is true that \\(E_1 = T_1\\) only when \\(m_1=0\\) . Moreover, one can differentiate \\(E_1\\) w.r.t. \\(T_2\\) and it yields $$ \\begin{equation}\\label{eq:dE1/dT2} \\frac{dE_1}{dT_2}=m_2x^2\\times \\frac{\\alpha +\\beta + \\gamma}{\\eta} \\end{equation} $$ where \\[ \\begin{align*} \\alpha &= m_1^2 \\delta, \\\\ \\beta & = m_2^2 (2T_2+\\delta),\\\\ \\gamma &= 2m_2 x \\kappa,\\\\ \\eta &= \\delta^2 x \\kappa, \\end{align*} \\] with \\(\\delta=-T_2 + (T_2 + 2m_2)x^2\\) and \\(\\kappa=\\sqrt{(T_2+2m_2)(\\alpha+ T_2 m_2^2 )}\\) . In most of the situations, elastic scattering does not change particle mass, thus $$ \\begin{equation} \\frac{dE_1}{dT_2} = \\frac{d}{dT_2}(T_1 + m_1) = \\frac{dT_1}{dT_2} \\end{equation} $$ and this allows to express every quantities in terms of kinetic energies \\(T_i\\) . When we construct the corresponding class , the namespace will always refers to \\(T_i\\) instead of \\(E_i\\) . Though the angle \\(\\vartheta\\) for particle 1 is irrelevant to our study, we can still determine it by 3-momentum conservation, $$ \\begin{equation} \\vartheta =\\sin^{-1}\\left( \\frac{|\\mathbf{p}_2^\\prime|}{|\\mathbf{p}_1^\\prime|}\\sin\\psi\\right) \\end{equation} $$ where \\(|\\mathbf{p_1^\\prime}|=\\sqrt{E_1^{\\prime 2}-m_1^2}\\) and \\(E_1^\\prime = E_1-T_2\\) .","title":"General expressions"},{"location":"api/kinematics/22scat/#validation","text":"Now recall the \\(\\nu\\chi\\) scattering with \\(E_1=E_\\nu\\) , \\(T_2=T_\\chi\\) , \\(m_1=m_\\nu=0\\) and \\(m_2=m_\\chi\\) . With \\(|\\mathbf{p}_2^\\prime|=|\\mathbf{p}_\\chi|=\\sqrt{T_\\chi(T_\\chi+m_\\chi)}\\) , Eq. \\(\\eqref{eq:E1}\\) becomes \\[ \\begin{equation}\\label{eq:Ev} E_\\nu = T_\\chi m_\\chi \\frac{T_\\chi + |\\mathbf{p}_\\chi|x }{( |\\mathbf{p}_\\chi|x-T_\\chi)(|\\mathbf{p}_\\chi|x+T_\\chi)}=\\frac{T_\\chi m_\\chi}{|\\mathbf{p}_\\chi|x-T_\\chi}. \\end{equation} \\] Additionally, \\[ \\begin{align*} \\alpha &= 0, \\\\ \\beta & = m_\\chi^2 (T_\\chi+(T_\\chi +2m_\\chi)x^2),\\\\ \\gamma &= 2m_\\chi^2 |\\mathbf{p}_\\chi|x,\\\\ \\eta &= \\delta^2 m_\\chi |\\mathbf{p}_\\chi|x , \\end{align*} \\] and with some tedious math one obtains \\[ \\begin{align*} m_\\chi x^2\\frac{\\alpha+\\beta+\\gamma}{\\eta}&= \\frac{x}{\\delta^2}\\frac{m_\\chi^2}{|\\mathbf{p}_\\chi|}(T_\\chi+(T_\\chi+2m_\\chi)x^2+2|\\mathbf{p}_\\chi|x) \\\\ &=\\frac{x}{\\delta^2}\\frac{m_\\chi^2}{|\\mathbf{p}_\\chi|}\\left(T_\\chi +\\frac{|\\mathbf{p}_\\chi|^2}{T_\\chi}x^2+2|\\mathbf{p}_\\chi|x\\right)\\\\ & = \\frac{x}{\\delta^2}\\frac{m_\\chi^2}{|\\mathbf{p}_\\chi|} \\frac{(T_\\chi + |\\mathbf{p}_\\chi|x)^2}{T_\\chi } \\end{align*} \\] we further use \\[ \\begin{align*} \\delta^2 & =\\left(-T_\\chi + \\frac{|\\mathbf{p}_\\chi|^2}{T_\\chi}x^2\\right)^2=\\frac{(|\\mathbf{p}_\\chi|^2x^2 - T_\\chi^2)^2}{T_\\chi^2}\\\\ &= \\frac{(|\\mathbf{p}_\\chi|x - T_\\chi)^2(|\\mathbf{p}_\\chi|x + T_\\chi)^2}{T_\\chi^2} \\end{align*} \\] then finally reaches \\[ \\begin{equation}\\label{eq:dEv/dTx} m_\\chi x^2\\frac{\\alpha+\\beta+\\gamma}{\\eta}=\\left(\\frac{m_\\chi}{|\\mathbf{p}_\\chi|x - T_\\chi}\\right)^2\\frac{T_\\chi}{|\\mathbf{p}_\\chi|}x = \\frac{dE_\\nu}{dT_\\chi}. \\end{equation} \\] We discover that Eqs. \\(\\eqref{eq:Ev}\\) and \\(\\eqref{eq:dEv/dTx}\\) are exactly Eqs. (5) and (8) in BDM Physics respectively. Thus conclude that Eqs. \\(\\eqref{eq:E1}\\) and \\(\\eqref{eq:dE1/dT2}\\) are the general expressions for massive 2-2 elastic scattering.","title":"Validation"},{"location":"api/kinematics/KallenLambda/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.KallenLambda \u00b6 snorer.KallenLambda( x , y , z ) \u00b6 K\u00e4llen lambda function $$ \\lambda(x,y,z)=x^2+y^2+z^2-2(xy+yz+zx), $$ a useful function for evaluating kinetical quantities in particle physics. Parameters: x : array_like y : array_like z : array_like Returns: out : scalar/ndarray out is scalar if all inputs are scalars. References \u00b6 V. Ilisie, Concepts in quantum field theory: A practitioner's toolkit , Springer (2016)","title":"KallenLambda"},{"location":"api/kinematics/KallenLambda/#snorerkallenlambda","text":"","title":"snorer.KallenLambda"},{"location":"api/kinematics/Kinematics/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.Kinematics \u00b6 class snorer.Kinematics( T2 , m1 , m2 , psi ) \u00b6 This class constructs the required kinetic energy \\(T_1\\) of incoming particle with mass \\(m_1\\) to boost the target with mass \\(m_2\\) to kinetic energy \\(T_2\\) along the direction \\(\\psi\\) . See Fig. 1 in 2-2 elastic scattering . Parameters: T2 : float Kinetic energy \\(T_2\\) received by the particle 2, MeV m1 : float Mass of particle 1 (incident) \\(m_1\\) , MeV m2 : float Mass of particle 2 (target) \\(m_2\\) , MeV psi : float Lab frame scattering angle \\(\\psi\\) , rad Attributes: T1 : float The required kinetic energy \\(T_1\\) of particle 1, MeV dT1 : float The Jacobian \\(dT_1/dT_2\\) , dimensionless x : float \\(x:=\\cos\\psi \\in [1,-1]\\) sanity : bool Are the parameters physically plausible? True for plausible and False for physically impossible. dLips : float Value for differential Lorentz invariant phase space Examples Import snorer and do >>> import snorer as sn >>> T2,m1,m2,psi = 15,0,1e-3,0.05 # kinetic energy, m1, m2, scattering angle >>> snv = sn.Kinematics(T2,m1,m2,psi) >>> snv.T1 # required kinetic energy T1 for particle 1 -0.8451953159962898 >>> snv.dT1 # Jacobian 0.0031707324661873464 >>> snv.sanity # is this physically possible? False It is clear that massless particle 1 is no way to upscatter particle 2 with \\(m_2=10^{-3}\\) MeV to \\(T_2=15\\) MeV at angular direction \\(\\psi\\) . Becasue the required \\(T_1\\) ( snv.T1 ) is negative. The attribute snv.sanity is False , which implies this reaction is physically impossible.","title":"Kinematics"},{"location":"api/kinematics/Kinematics/#snorerkinematics","text":"","title":"snorer.Kinematics"},{"location":"api/kinematics/Mandelstam/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.Mandelstam \u00b6 class snorer.Mandelstam( T2 , m1 , m2 , psi ) \u00b6 Superclass: snorer.Kinematics This class constructs the associated Mandelstam variables \\(s\\) , \\(t\\) and \\(u\\) associated with the scattering process depicted in Fig. 1 in 2-2 elastic scattering . Parameters: T2 : float Kinetic energy \\(T_2\\) received by the particle 2, MeV m1 : float Mass of particle 1 (incident) \\(m_1\\) , MeV m2 : float Mass of particle 2 (target) \\(m_2\\) , MeV psi : float Lab frame scattering angle \\(\\psi\\) , rad Attributes: s : float The \\(s\\) -channel in this scattering process, MeV 2 t : float The \\(t\\) -channel in this scattering process, MeV 2 u : float The \\(u\\) -channel in this scattering process, MeV 2 T1 : float The required kinetic energy \\(T_1\\) of particle 1, MeV dT1 : float The Jacobian \\(dT_1/dT_2\\) , dimensionless x : float \\(x:=\\cos\\psi \\in [1,-1]\\) sanity : bool Are the parameters physically plausible? True for plausible and False for physically impossible. dLips : float Value for differential Lorentz invariant phase space Notes Given \\(T_1\\) is obtained from its superclass snorer.Kinematics , we can evaluate all Mandelstam variables easily. Thus, \\[ \\begin{align*} s &= (p_1+p_2)^2 = m_1^2+m_2^2 + 2 E_1 m_1 \\\\ &= m_1^2+m_2^2 + 2(T_1+m_1)m_2 \\end{align*} \\] for \\(s\\) -channel, and \\[ \\begin{align*} t &= (p_2^\\prime - p_2)^2 = 2m_2^2 - 2E_2 E_2^\\prime \\\\ &= 2m_2^2 - 2(T_2+m_2)m_2. \\end{align*} \\] For \\(u\\) -channel, we use the identity $$ s+t+u = \\sum_i m_i^2 = 2(m_1^2+m_2^2) $$ where \\(i\\) indicates all particle masses before and after the reaction. References \u00b6 M. Peskin and D. Schroeder, An Introduction To Quantum Field Theory , Westview (1995)","title":"Mandelstam"},{"location":"api/kinematics/Mandelstam/#snorermandelstam","text":"","title":"snorer.Mandelstam"},{"location":"api/kinematics/Neutrino/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.Neutrino \u00b6 class snorer.Neutrino( Tx , mx , psi ) \u00b6 Superclass: snorer.Kinematics This class constructs the required neturino energy to have BDM with \\((T_\\chi,m_\\chi,\\psi)\\) . See Fig. 2 in BDM Physics . We have assumed neutrino mass \\(m_\\nu=0\\) . Parameters: Tx : float BDM kinetic energy \\(T_\\chi\\) , MeV mx : float DM mass \\(m_\\chi\\) , MeV psi : float Lab frame scattering angle \\(\\psi\\) , rad Attributes: Ev : float The required neutrino energy \\(E_\\nu\\) to boost DM with \\(m_\\chi\\) to \\(T_\\chi\\) , MeV dEv : float The Jacobian \\(dE_\\nu/dT_\\chi\\) , dimensionless x : float \\(x:=\\cos\\psi \\in [1,-1]\\) sanity : bool Is the reaction physically plausible? True for plausible and False for physically impossible. dLips : float Value for differential Lorentz invariant phase space Examples Import snorer and do >>> import snorer as sn >>> Tx,mx,psi = 15,1e-3,0.05 # BDM kinetic energy, mx, scattering angle >>> snv = sn.Neutrino(Tx,mx,psi) >>> snv.Ev # required Ev -0.8451953159962898 >>> snv.dEv # Jacobian 0.0031707324661873464 >>> snv.sanity # is this physically possible? False This example is identical to the example conducted in snorer.Kinematics as snorer.Kinematics is the superclass of snorer.Neutrino . One understands that \\(T_1=E_\\nu\\) , \\(T_2=T_\\chi\\) , \\(m_1=m_\\nu=0\\) and \\(m_2=m_\\chi\\) .","title":"Neutrino"},{"location":"api/kinematics/Neutrino/#snorerneutrino","text":"","title":"snorer.Neutrino"},{"location":"api/kinematics/get_gx/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.get_gx \u00b6 snorer.get_gx( Ev , mx , psi ) \u00b6 Calculate the probability density for cross section at scattering angle psi and averaged over azimuthal angle in lab frame. This is for energy-independent cross section. See Eq. (3) in BDM Physics . Parameters: Ev : array_like The incoming neutrino energy \\(E_\\nu\\) , MeV mx : array_like DM mass \\(m_\\chi\\) , MeV psi : array_like Lab frame scattering angle \\(\\psi\\) , rad Returns: out : scalar/ndarray Probability density for cross section at \\(\\psi\\) and averaged over azimuthal angle \\(2\\pi\\) . The result is a scalar if the three inputs are all scalars. The unit is sr \u22121 Examples In this example, we show \\(2\\pi g_\\chi\\sin\\psi\\) vs. \\(\\psi\\) for various \\(m_\\chi\\) . import numpy as np import matplotlib.pyplot as plt import snorer as sn # Neutrino energy, mx values and psi range Ev = 10 mx_vals = np.logspace(-3,0,4) psi_vals = np.linspace(0,np.pi/2,500) # Draw gx plots for various mx for mx in mx_vals: dOmega = 2*np.pi*np.sin(psi_vals) gx_vals = get_gx(Ev,mx,psi_vals)*dOmega plt.plot(psi_vals,gx_vals,label=fr'$m_\\chi={1000*mx:.0f}$ keV') plt.yscale('log') plt.ylim(9.5e-3,) plt.xlabel(r'$\\psi$ [rad]') plt.ylabel(r'$2\\pi g_\\chi\\sin\\psi$') plt.legend() plt.show()","title":"get_gx"},{"location":"api/kinematics/get_gx/#snorerget_gx","text":"","title":"snorer.get_gx"},{"location":"api/kinematics/get_psiMax/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.get_psiMax \u00b6 ssnorer.get_psiMax( Tx , mx ) \u00b6 Get the maximumly allowed scattering angle \\(\\psi_{\\rm max}\\) . Se Eq. (6) BDM Physics . Parameters: Tx : array_like BDM kinetic energy \\(T_\\chi\\) , MeV mx : array_like DM mass \\(m_\\chi\\) , MeV Returns: out : scalar/ndarray Maximum allowed scattering angle \\(\\psi_{\\rm max}\\) [rad]. out is scalar if all inputs are scalars.","title":"get_psiMax"},{"location":"api/kinematics/get_psiMax/#snorerget_psimax","text":"","title":"snorer.get_psiMax"},{"location":"api/kinematics/get_thetaMax/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.get_thetaMax \u00b6 snorer.get_thetaMax( t , Tx , mx , Rs ) \u00b6 Find the maximum BDM field-of-view, \\(\\theta_{M}^*\\) , that centers SN at particular time \\(t^*\\) . See Eq. (24) in BDM Physics . Parameters: t : scalar The BDM at particular time \\(t^*\\) , seconds. If \\(t^* > t_{\\rm van}\\) , the result is unphysical. Tx : scalar BDM kinetic energy \\(T_\\chi\\) , MeV mx : scalar DM mass \\(m_\\chi\\) , MeV Rs : scalar Distance to supernova, \\(R_s\\) , kpc. Returns: out : scalar Maximum field-of-view centers supernova, \\(\\theta^*_M\\) [rad].","title":"get_thetaMax"},{"location":"api/kinematics/get_thetaMax/#snorerget_thetamax","text":"","title":"snorer.get_thetaMax"},{"location":"api/kinematics/get_tvan/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.get_tvan \u00b6 snorer.get_tvan( Tx , mx , Rs ) \u00b6 Get the BDM vanishing time. The time-zero is set as the arrival of SN \\(\\nu\\) at Earth. See Eqs. (22) and (23) in BDM Physics . Parameters: Tx : array_like BDM kinetic energy \\(T_\\chi\\) , MeV mx : array_like DM mass \\(m_\\chi\\) , MeV Rs : array_like Distance to supernova, \\(R_s\\) , kpc Returns: out : scalar/ndarray BDM vanishing time \\(t_{\\rm vab}\\) , seconds Examples In this example, we show \\(t_{\\rm van}\\) on \\((m_\\chi,T_\\chi)\\) plane. import numpy as np import matplotlib.pyplot as plt import matplotlib.colors as mcolors import snorer as sn Rs = 9.6 # SN distance, kpc Tx_vals = np.logspace(-6,2,100) # Tx values mx_vals = np.logspace(-6,3,100) # mx values # Setup meshgrid for (mx,Tx) plane MX,TX = np.meshgrid(mx_vals,Tx_vals,indexing='ij') # Evaluating tvan and convert it to years TVAN = sn.get_tvan(TX,MX,Rs)/sn.constant.year2Seconds # Plot fig, ax = plt.subplots() # log-scaler color norm = mcolors.LogNorm(vmin=TVAN.min(), vmax=TVAN.max()) # Contour plot contour = ax.contourf(MX, TX, TVAN, levels=20, cmap=\"viridis\", norm=norm) ax.set_xscale('log') ax.set_yscale('log') ax.set_xlabel(r'$m_\\chi$ [MeV]') ax.set_ylabel(r'$T_\\chi$ [MeV]') # Color bar cbar = fig.colorbar(contour, ax=ax) cbar.set_label(r\"$t_{\\rm van}$ [yrs]\") plt.show() Notes Practically speaking, the underlying algorithm of snorer.get_tvan is not vectorized. It relies on numpy.nditer to support vectorized inputs/outputs. The kernel of snorer.get_tvan is the internal function snorer._get_tof which has the same Parameters and Returns as snorer.get_tvan but only accepts scalar inputs/outputs. It could become clumsy when the points to be calcuated are massive.","title":"get_tvan"},{"location":"api/kinematics/get_tvan/#snorerget_tvan","text":"","title":"snorer.get_tvan"},{"location":"api/kinematics/get_vx/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.get_vx \u00b6 ssnorer.get_vx( Tx , mx ) \u00b6 Get dimensionless BDM velocity \\(v_\\chi/c\\) . See BDM Physics for detail. Parameters: Tx : array_like BDM kinetic energy \\(T_\\chi\\) , MeV mx : array_like DM mass \\(m_\\chi\\) , MeV Returns: out : scalar/ndarray Dimensionless BDM velocity. out is scalar if all inputs are scalars.","title":"get_vx"},{"location":"api/kinematics/get_vx/#snorerget_vx","text":"","title":"snorer.get_vx"},{"location":"api/main/differential_flux/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.differential_flux \u00b6 snorer.differential_flux( t , Tx , mx , theta , phi , Rs , beta , sigxv0=1e-45 , profile='MW' , d_cut=3.24e-15 , r_cut=1e-5 , is_spike=False , sigv=None , tBH=1e10 , alpha='3/2' ) \u00b6 The differential supernova-neutrin-boosted dark matter flux at Earth at specific time \\(t\\) and angular direction \\((\\theta,\\varphi)\\) \\[ \\left.\\sin\\theta\\mathcal{J}j_\\chi(d,r,T_\\chi,\\psi)\\right|_{t=\\frac{d}{c}+\\frac{\\ell}{v_\\chi}-t_\\nu}. \\] This is the integrand of Eq. (18) in BDM Physics , cf. Fig. 1 too. Parameters: t : float Time \\(t\\) , relative to the SN \\(\\nu\\) 's arrival Tx : float BDM kinetic energy, MeV. mx : float Dark matter mass, MeV. theta : float The zenith angle \\(\\theta\\) , rad. phi : float The azimuthal angle \\(\\varphi\\) that centers SN, rad. Rs : floate Distance from supernova to Earth, kpc. beta : floate The off-center angle, characterizes how SN deviates from GC-Earth axis angularly, rad. sigxv0 : float* Total DM- \\(\\nu\\) cross section, cm 2 . It will be multiplied by snorer.get_gx to account for the angular distribution and makes it cm 2 sr \u22121 . profile : str 'MW' or 'LMC' stands for Milky Way or Large Magellanic Cloud profile in use. d_cut : scalar >Terminating point for \\(d\\) . Below the value will return 0. Default is \\(3.24\\times 10^{-15}\\) kpc, approximating 100 km, the size of neutrino sphere. r_cut : scalar Terminating \\(n_\\chi\\) when \\(r^\\prime <\\) r_cut , kpc. If one needs to incorporate dark matter spike in the central region, r_cut cannot be too large. Otherwise, the spike effect will be chopped off before it has any noticeble consequence. Default is \\(10^{-8}\\) kpc. is_spike : bool Is halo spike included? Default is False . sigv : array_like Dark matter annihilation cross section, in the unit of \\(10^{-26}\\) cm 3 s \u22121 . None indicates no annihilation. It is disregarded if is_spike = False . tBH : float Age of supermassive black hole in the galactic center, years. It is disregarded if is_spike = False . alpha : str Slope of the spike, '3/2' or '7/3' . It is disregarded if is_spike = False . Returns: out : scalar The differential BDM flux at Earth, MeV \u22121 cm \u22122 s \u22121 sr \u22121 .","title":"differential_flux"},{"location":"api/main/differential_flux/#snorerdifferential_flux","text":"","title":"snorer.differential_flux"},{"location":"api/main/dsigma_xv/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.dsigma_xv \u00b6 snorer.dsigma_xv( Ev , mx , psi , sigxv0='1e-45' ) \u00b6 Differential DM- \\(\\nu\\) scattering cross section at angle \\(\\psi\\) in lab frame, $$ \\frac{d\\sigma_{\\chi\\nu}}{d\\Omega_{\\rm lab}}=\\sigma_0 \\times g_\\chi(\\psi). $$ See Eqs. (2) and (3) in BDM Physics . Parameters: Ev : array_like Neutrino energy, MeV. mx : array_like Dark matter mass, MeV. psi : array_like Lab frame scattering angle \\(\\psi \\in [0,\\pi/2]\\) . sigxv0 : array_like Energy-independent DM- \\(\\nu\\) cross section \\(\\sigma_0\\) , cm 2 . Default is \\(10^{-45}\\) cm 2 . Returns: out : scalar/ndarray Differential DM- \\(\\nu\\) cross section, cm 2 sr \u22121 . Out is scalar if all inputs are scalars. Notes The result is simply sigxv0 * snorer.get_gx . See also snorer.get_gx .","title":"dsigma_xv"},{"location":"api/main/dsigma_xv/#snorerdsigma_xv","text":"","title":"snorer.dsigma_xv"},{"location":"api/main/emissivity_jx/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.emissivity_jx \u00b6 snorer.emissivity_jx( Ev , dEv , mx , d , r , psi , sigxv0=1e-45 , profile='MW' , d_cut=3.24e-15 , is_spike=False , sigv=None , tBH=1e10 , alpha='3/2' ) \u00b6 Emissivity \\(j_\\chi\\) of supernova-neutrino-boost dark matter at boost point. See Eq. (13) in BDM Physics . Parameters: Ev : array_like The supernova neutrino energy, MeV. dEv : array_like The Jacobian \\((dE_\\nu/dT_\\chi)(v_\\chi/c)\\) that converts per netrino energy width, \\(dE_\\nu\\) , to per BDM kinetic energy width, \\(dT_\\chi\\) . mx : array_like Dark matter mass, MeV. d : array_like Distance from supernova to boost point, kpc. r : array_like Distance from galactic center to boost point, kpc. psi : array_like The scattering angle in lab frame at boost point, rad. sigxv0 : float* Total DM- \\(\\nu\\) cross section, cm 2 . It will be multiplied by snorer.get_gx to account for the angular distribution and makes it cm 2 sr \u22121 . profile : str 'MW' or 'LMC' stands for Milky Way or Large Magellanic Cloud profile in use. d_cut : float Terminating point for \\(d\\) . Below the value will return 0. Default is \\(3.24\\times 10^{-15}\\) kpc, approximating 100 km, the size of neutrino sphere. is_spike : bool Is halo spike included? Default is False . sigv : array_like Dark matter annihilation cross section, in the unit of \\(10^{-26}\\) cm 3 s \u22121 . None indicates no annihilation. It is disregarded if is_spike = False . tBH : float Age of supermassive black hole in the galactic center, years. It is disregarded if is_spike = False . alpha : str Slope of the spike, '3/2' or '7/3' . It is disregarded if is_spike = False . Returns: out : scalar/ndarray BDM emissivity at boost point along the direction \\(\\psi\\) , MeV \u22121 cm \u22123 s \u22121 sr \u22121 .","title":"emissivity_jx"},{"location":"api/main/emissivity_jx/#snoreremissivity_jx","text":"","title":"snorer.emissivity_jx"},{"location":"api/main/event/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.event \u00b6 snorer.event( mx , Rs , beta , Tx_range=[5,30] , t_range=[10,35*snorer.constant.year2Seconds] , sigxv0=1e-45 , profile='MW' , d_cut=3.24e-15 , r_cut=1e-5 , is_spike=False , sigv=None , tBH=1e10 , alpha='3/2' , nitn=10 , neval=30000 ) \u00b6 The supernova-neutrino-boosted dark matter evnet per electron with DM- \\(e\\) cross section \\(\\sigma_{\\chi e}\\) normalized to 1 cm 2 at Earth. The field-of-view \\(d\\Omega\\) is integrated over entirely and the kinetic energy \\(T_\\chi\\) , exposure time \\(t\\) can be integrated within user-defined ranges. Precisely speaking, the event \\(N_\\chi\\) is, using Eqs. (18) in BDM Physics , \\[ N_\\chi = N_e \\sigma_{\\chi e} \\int_{t_{\\rm min}}^{t_{\\rm max}} dt \\int_{T_{\\chi,{\\rm min}}}^{T_{\\chi,{\\rm max}}} dT_\\chi \\frac{d\\Phi_\\chi}{dT_\\chi} \\] and snorer.event presumes \\(N_e=1\\) and \\(\\sigma_{\\chi e}=1\\) cm 2 . One can restore the correct \\(N_\\chi^{\\rm correct}\\) for any detector by multiplying the true \\(N_e^{\\rm true}\\) for that detector and \\(\\sigma_{\\chi e}^{\\rm true}\\) , \\[ N_\\chi^{\\rm correct} = N_\\chi \\times \\frac{N_e}{1}\\times \\frac{\\sigma_{\\chi e}^{\\rm true}}{1 \\,{\\rm cm^2}} \\times \\frac{\\sigma_{\\chi\\nu}^{\\rm true}}{10^{-45}\\,{\\rm cm^2}} \\] where we have set \\(\\sigma_{\\chi \\nu}=10^{-45}\\) cm 2 by default in the function. Parameters: mx : float Dark matter mass, MeV. Rs : floate Distance from supernova to Earth, kpc. beta : floate The off-center angle, characterizes how SN deviates from GC-Earth axis angularly, rad. Tx_range : list Integration range for BDM kinetic energy [Tx_min,Tx_max] , MeV t_range : list Integration range for exposure time [t_min,t_max] , seconds sigxv0 : float* Total DM- \\(\\nu\\) cross section, cm 2 . It will be multiplied by snorer.get_gx to account for the angular distribution and makes it cm 2 sr \u22121 . profile : str 'MW' or 'LMC' stands for Milky Way or Large Magellanic Cloud profile in use. d_cut : float Terminating point for \\(d\\) . Below the value will return 0. Default is \\(3.24\\times 10^{-15}\\) kpc, approximating 100 km, the size of neutrino sphere. r_cut : scalar Terminating \\(n_\\chi\\) when \\(r^\\prime <\\) r_cut , kpc. If one needs to incorporate dark matter spike in the central region, r_cut cannot be too large. Otherwise, the spike effect will be chopped off before it has any noticeble consequence. Default is \\(10^{-8}\\) kpc. is_spike : bool Is halo spike included? Default is False . sigv : array_like Dark matter annihilation cross section, in the unit of \\(10^{-26}\\) cm 3 s \u22121 . None indicates no annihilation. It is disregarded if is_spike = False . tBH : float Age of supermassive black hole in the galactic center, years. It is disregarded if is_spike = False . alpha : str Slope of the spike, '3/2' or '7/3' . It is disregarded if is_spike = False . nitn : int Number of chains in vegas to evaluate the integral. Default is 10. neval : int Number of evaluation number in each chain in vegas . Default is 30000. Returns: out : scalar Event number of supernova-neutrino-boosted dark matter per electron. Notes We also use vegas to evaluate \\(N_\\chi\\) . See Notes in snorer.flux .","title":"event"},{"location":"api/main/event/#snorerevent","text":"","title":"snorer.event"},{"location":"api/main/flux/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.flux \u00b6 snorer.flux( t , Tx , mx , Rs , beta , sigxv0=1e-45 , profile='MW' , d_cut=3.24e-15 , r_cut=1e-5 , is_spike=False , sigv=None , tBH=1e10 , alpha='3/2' , nitn=10 , neval=30000 ) \u00b6 The supernova-neutrino-boosted dark matter flux at time \\(t\\) on Earth after integrated over a field-of-view \\(d\\Omega\\) . Note that zenith angle \\(\\theta\\) is integrated up to \\(\\theta^*_M\\) and azimuthal angle \\(\\varphi\\) from \\(0\\) to \\(2\\pi\\) . See Eqs. (18) and (24) in BDM Physics , cf. Fig. 1 too. Parameters: t : float Time \\(t\\) , relative to the SN \\(\\nu\\) 's arrival Tx : float BDM kinetic energy, MeV. mx : float Dark matter mass, MeV. Rs : floate Distance from supernova to Earth, kpc. beta : floate The off-center angle, characterizes how SN deviates from GC-Earth axis angularly, rad. sigxv0 : float* Total DM- \\(\\nu\\) cross section, cm 2 . It will be multiplied by snorer.get_gx to account for the angular distribution and makes it cm 2 sr \u22121 . profile : str 'MW' or 'LMC' stands for Milky Way or Large Magellanic Cloud profile in use. d_cut : float Terminating point for \\(d\\) . Below the value will return 0. Default is \\(3.24\\times 10^{-15}\\) kpc, approximating 100 km, the size of neutrino sphere. r_cut : scalar Terminating \\(n_\\chi\\) when \\(r^\\prime <\\) r_cut , kpc. If one needs to incorporate dark matter spike in the central region, r_cut cannot be too large. Otherwise, the spike effect will be chopped off before it has any noticeble consequence. Default is \\(10^{-8}\\) kpc. is_spike : bool Is halo spike included? Default is False . sigv : array_like Dark matter annihilation cross section, in the unit of \\(10^{-26}\\) cm 3 s \u22121 . None indicates no annihilation. It is disregarded if is_spike = False . tBH : float Age of supermassive black hole in the galactic center, years. It is disregarded if is_spike = False . alpha : str Slope of the spike, '3/2' or '7/3' . It is disregarded if is_spike = False . nitn : int Number of chains in vegas to evaluate the integral. Default is 10. neval : int Number of evaluation number in each chain in vegas . Default is 30000. Returns: out : scalar The differential BDM flux at Earth, MeV \u22121 cm \u22122 s \u22121 sr \u22121 . Notes We use vegas to evaluate the integral Eq. (18). This explains why we incorporate nitn and neval as the parameters. Increasing these values will improve the accuracy but the computation time enhances too. One may need to find a balance between acceptable accuracy and evaluation time.","title":"flux"},{"location":"api/main/flux/#snorerflux","text":"","title":"snorer.flux"},{"location":"api/main/sn_nu_spectrum/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.sn_nu_spectrum \u00b6 snorer.sn_nu_spectrum( Ev , d , d_cut=3.24e-15 , is_density=False ) \u00b6 Supernova neutrino spectrum at distance \\(d\\) to supernova, $$ \\frac{dN_\\nu}{dE_\\nu}=\\sum_i\\frac{L_{\\nu_i}}{4\\pi d^2\\langle E_{\\nu_i}\\rangle} f_{\\nu_i}(E_\\nu). $$ See Eqs. (9-12) in BDM Physics for detail. Parameters: Ev : array_like Supernova neutrino energy, MeV. d : array_like Distance from supernova to the boost point, kpc. d_cut : float Terminating point for \\(d\\) . Below the value will return 0. Default is \\(3.24\\times 10^{-15}\\) kpc, approximating 100 km, the size of neutrino sphere. is_density : bool Should convert the output to the unit of number density. Default is False and output has the unit of flux. Returns: out : scalar/ndarray Outputs flux [MeV \u22121 cm \u22122 s \u22121 ] when is_density = False , or number density [MeV \u22121 cm \u22123 ] when is_density = True . The output is scalar if all inputs are scalars. Examples In this example, we show \\(dN_\\nu/dE_\\nu\\) over \\((E_\\nu,d)\\) plane. One can clearly see that \\(d<\\) d_cut the flux is 0. import numpy as np import matplotlib.pyplot as plt import matplotlib.colors as mcolors import snorer as sn Ev_vals = np.logspace(-3,2,100) # Ev values d_vals = np.logspace(-16,2,200) # d values # Setup meshgrid for (Ev,d) plane Ev,D = np.meshgrid(Ev_vals,d_vals,indexing='ij') # Evaluate SNv flux DNvDEv = sn.sn_nu_spectrum(Ev,D) # Plot fig, ax = plt.subplots() # log-scaler color norm = mcolors.LogNorm(vmin=DNvDEv.min() + 1, vmax=DNvDEv.max()) # Contour plot contour = ax.contourf(Ev, D, DNvDEv, levels=20, cmap=\"viridis\", norm=norm) ax.set_xscale('log') ax.set_yscale('log') ax.set_xlabel(r'$E_\\nu$ [MeV]') ax.set_ylabel(r'$d$ [kpc]') # Color bar cbar = fig.colorbar(contour, ax=ax) cbar.set_label(r\"$dN_\\nu/dE_\\nu$ [MeV$^{-1}$ cm$^{-2}$ s$^{-1}$]\") plt.show()","title":"sn_nu_spectrum"},{"location":"api/main/sn_nu_spectrum/#snorersn_nu_spectrum","text":"","title":"snorer.sn_nu_spectrum"},{"location":"api/utils/coord_transf/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; Coordinate Transformations \u00b6 We briefly introduce how to extract the off-center angle \\(\\beta\\) , cf. Fig. 1 in BDM Physics , from two famous astronomical coordinate systems, galactic and equatorial coordinates. This aids us to input arbitrary supernova (SN) loactions from astrophysical database, eg. SRcat , into snorer and evaluates its BDM signature. Galactic coordinate \u00b6 The galactic coordinate is shown in Fig. 1 with its longitute \\(\\ell\\) and latitude \\(b\\) . Once \\((\\ell,b)\\) for a SN is specified, its position on the celestial sphere is marked. Figure 1. The galactic coordinate, including longitutde \\(\\ell\\) and latitude \\(b\\). Given that the distance from Earth to SN, \\(R_s\\) , will be provided by the database, the last task is to retrieve \\(\\beta\\) . Before proceed, there are two conventions in this coordinate. In terms of Cartesian representation, the Earth is at the origin and the galactic center (GC) at \\((x,y,z)=(0,R_e,0)\\) . See the lateral view to this geometrical system in Fig. 2 . Figure 2. The Cartesian representation of galactic coordinate with distance included. With two unit vectors that one points from Earth to SN \\(\\hat{\\mathbf{s}} = (x_s,y_s,z_s)/R_s\\) and the other points from Earth to GC \\(\\hat{\\mathbf{g}} = (0,1,0)\\) , we immediately obtain \\[ \\begin{equation} y_s = R_s \\cos b \\cos\\ell \\end{equation} \\] The reason why we don't need \\(x_s\\) and \\(z_s\\) is clear that when we evaluate \\(\\beta\\) , \\[ \\begin{equation}\\label{eq:cos_beta_MW} \\cos\\beta = \\hat{\\mathbf{g}}\\cdot \\hat{\\mathbf{s}} = \\cos b\\cos\\ell \\end{equation} \\] there is no need for these two. Note that when we retrieve \\(\\beta\\) from galactic coordinate, there is impossible to transform it back. It is obvious that \\(\\beta\\) to \\((\\ell,b)\\) is a one to two transformation. Without one additional constraint, the reverse is ill-posed. Reconstructing the SN location relative to galactic plane is implausible simply by \\(\\beta\\) . For completeness, to have the exact location, the missing information one needs is the azimuthal angle, say, around the Earth-GC axis. This requires both \\(x_s\\) and \\(z_s\\) . We omit the detail here due to its irrelevance. Supernova in arbitrary distant galaxy \u00b6 We now consider a more general case that SN lies in a arbitrary distant galaxy and we want to know the BDM signature from that SN. Again, no matter how this scene chages, the underlying concept is to obtain three things: \\(R_g\\) , \\(R_s\\) and \\(\\beta\\) . The last two are quite familiar but the first one indicates the distance between Earth and the center of the distant galaxy. On the other hand, we actually replace \\(R_e\\) by \\(R_g\\) . See Fig. 3 . Figure 3. SN in arbitrary distant galaxy. Suppose the galactic coordinates for the two stellar objects are \\((\\ell_s,b_s)\\) and \\((\\ell_g,b_g)\\) respectively, we can follow the previous derivation to obtain their Cartesian representations \\((x_s,y_s,z_s)\\) and \\((x_g,y_g,z_g)\\) . Thus \\[ \\begin{align*} x_s &= R_s \\cos b_s \\sin (2\\pi- \\ell_s), \\\\ y_s & = R_s \\cos b_s \\cos \\ell_s, \\\\ z_s & = R_s \\sin b_s \\end{align*} \\] for SN and \\[ \\begin{align*} x_g &= R_g \\cos b_g \\sin (2\\pi- \\ell_g), \\\\ y_g & = R_g \\cos b_g \\cos \\ell_g, \\\\ z_g & = R_g \\sin b_g \\end{align*} \\] for the distant galaxy. We define two unit vectors for the two stellar objects $$ \\hat{\\mathbf{s}}=(-\\cos b_s \\sin \\ell_s, \\cos b_s \\cos \\ell_s,\\sin b_s) $$ and $$ \\hat{\\mathbf{g}}=(-\\cos b_g \\sin \\ell_g, \\cos b_g \\cos \\ell_g,\\sin b_g) $$ respectively. The off-center angle \\(\\beta\\) can be retrieved by the same formula \\[ \\begin{equation} \\cos \\beta = \\hat{\\mathbf{g}}\\cdot\\hat{\\mathbf{s}} = \\cos b_s \\cos b_g \\cos(\\ell_s - \\ell_g) + \\sin b_s \\sin b_g. \\end{equation} \\] In terms of our Milky Way, \\(\\ell_g = b_g=0\\) , we recover Eq. \\(\\eqref{eq:cos_beta_MW}\\) . Equatorial coordinate \u00b6 Another commonly used coordinate system is the equatorial coordinate and is specified by right ascension \\(\\alpha\\) (RA) and declination \\(\\delta\\) (DEC). Due to its complexity, we do not provide any detail mathematical conversion from \\((\\alpha,\\delta)\\) to \\(\\beta\\) here. To tackle this task, we employ Astropy to resolve \\((\\ell,b)\\) from \\((\\alpha,\\delta)\\) . Then proceed the discussion in the last section to recover \\(\\beta\\) . Note that we will assume the input \\((\\alpha,\\delta)\\) in snorer is expressed in terms of ICRS J2000.0.","title":"Coordinate Transformations"},{"location":"api/utils/coord_transf/#coordinate-transformations","text":"We briefly introduce how to extract the off-center angle \\(\\beta\\) , cf. Fig. 1 in BDM Physics , from two famous astronomical coordinate systems, galactic and equatorial coordinates. This aids us to input arbitrary supernova (SN) loactions from astrophysical database, eg. SRcat , into snorer and evaluates its BDM signature.","title":"Coordinate Transformations"},{"location":"api/utils/coord_transf/#galactic-coordinate","text":"The galactic coordinate is shown in Fig. 1 with its longitute \\(\\ell\\) and latitude \\(b\\) . Once \\((\\ell,b)\\) for a SN is specified, its position on the celestial sphere is marked. Figure 1. The galactic coordinate, including longitutde \\(\\ell\\) and latitude \\(b\\). Given that the distance from Earth to SN, \\(R_s\\) , will be provided by the database, the last task is to retrieve \\(\\beta\\) . Before proceed, there are two conventions in this coordinate. In terms of Cartesian representation, the Earth is at the origin and the galactic center (GC) at \\((x,y,z)=(0,R_e,0)\\) . See the lateral view to this geometrical system in Fig. 2 . Figure 2. The Cartesian representation of galactic coordinate with distance included. With two unit vectors that one points from Earth to SN \\(\\hat{\\mathbf{s}} = (x_s,y_s,z_s)/R_s\\) and the other points from Earth to GC \\(\\hat{\\mathbf{g}} = (0,1,0)\\) , we immediately obtain \\[ \\begin{equation} y_s = R_s \\cos b \\cos\\ell \\end{equation} \\] The reason why we don't need \\(x_s\\) and \\(z_s\\) is clear that when we evaluate \\(\\beta\\) , \\[ \\begin{equation}\\label{eq:cos_beta_MW} \\cos\\beta = \\hat{\\mathbf{g}}\\cdot \\hat{\\mathbf{s}} = \\cos b\\cos\\ell \\end{equation} \\] there is no need for these two. Note that when we retrieve \\(\\beta\\) from galactic coordinate, there is impossible to transform it back. It is obvious that \\(\\beta\\) to \\((\\ell,b)\\) is a one to two transformation. Without one additional constraint, the reverse is ill-posed. Reconstructing the SN location relative to galactic plane is implausible simply by \\(\\beta\\) . For completeness, to have the exact location, the missing information one needs is the azimuthal angle, say, around the Earth-GC axis. This requires both \\(x_s\\) and \\(z_s\\) . We omit the detail here due to its irrelevance.","title":"Galactic coordinate"},{"location":"api/utils/coord_transf/#equatorial-coordinate","text":"Another commonly used coordinate system is the equatorial coordinate and is specified by right ascension \\(\\alpha\\) (RA) and declination \\(\\delta\\) (DEC). Due to its complexity, we do not provide any detail mathematical conversion from \\((\\alpha,\\delta)\\) to \\(\\beta\\) here. To tackle this task, we employ Astropy to resolve \\((\\ell,b)\\) from \\((\\alpha,\\delta)\\) . Then proceed the discussion in the last section to recover \\(\\beta\\) . Note that we will assume the input \\((\\alpha,\\delta)\\) in snorer is expressed in terms of ICRS J2000.0.","title":"Equatorial coordinate"},{"location":"api/utils/equa_to_beta/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.equatorial_to_beta \u00b6 snorer.equatorial_to_beta( ra , dec , GC_coord=None ) \u00b6 Transform equatorial coordinate to off-center angle and galactic coordinate \\((\\beta,\\ell,b)\\) . Parameters: ra : array_like Right ascension, hms in string type. Eg. '5h6.7m4.4s' . dec : array_like Declination, dms in string type. Eg. '6d10.7m9.4s' . GC_coord : None/list The equatorial coordinate for arbitrary galactic center. Default is None , which automatically implements our Milky Way center. For a specific GC coordinate, it should have GC_coord = [RA,DEC] where RA and DEC are, similar to ra and dec , in hms and dms units respectively. Additionally, they should be subject to ICRS J2000.0. Returns: out : tuple Tuple of \\((\\beta,\\ell,b)\\) in rad. Each component is scalar if all inputs are scalars. Notes We rely on astropy.coordinates.SkyCoord in Astropy to resolve \\((\\ell,b)\\) from \\((\\alpha,\\delta)\\) and obtain \\(\\beta\\) by snorer.galactic_to_beta .","title":"equatorial_to_beta"},{"location":"api/utils/equa_to_beta/#snorerequatorial_to_beta","text":"","title":"snorer.equatorial_to_beta"},{"location":"api/utils/gal_to_beta/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; .mono { font-family: monospace; } snorer.galactic_to_beta \u00b6 snorer.galactic_to_beta( l , b , GC_coord=[0,0] ) \u00b6 Transform galactic coordinate \\((\\ell,b)\\) to off-center angle \\(\\beta\\) . See Eqs. (2) in Coordinate Transformations . Parameters: l : array_like Galactic longitude, rad. b : array_like Galactic latitude, rad. GC_coord : list Galactic coordinate for arbitrary galactic center \\((\\ell_g,b_g)\\) . Default is Milky Way center GC_coord = [0,0] . Returns: out : scalar/ndarray Off-center angle \\(\\beta\\) , rad. The result is scalar if all inputs are scalars.","title":"galactic_to_beta"},{"location":"api/utils/gal_to_beta/#snorergalactic_to_beta","text":"","title":"snorer.galactic_to_beta"},{"location":"manual/overview/","text":"window.MathJax = { tex: { tags: \"ams\" // Auto-numbering, AMS based } }; BDM Physics \u00b6 We review all the details provided in Refs. [ 1 , 2 ]. While these papers present mathematical expressions suitable for general readers, the content in this section is tailored for programming purposes. The goal of this document is not to replace Refs. [ 1 , 2 ] but to bridge the gap between traditional journal writing and the technical details required for programming. Typos and misinformation are corrected here to ensure clarity and facilitate understanding of the subsequent Python code. General picture \u00b6 Given non-zero cross section between DM ( \\(\\chi\\) ) and neutrino ( \\(\\nu\\) ), it is expected that when SN \\(\\nu\\) could scatter with halo \\(\\chi\\) when propagating outward from the explosion site. We display the general scheme in Fig. 1 . In this figure, SN, galactic center (GC) and Earth are denoted as S, G and E respectively. Figure 1. The 3D scheme for SN\\(\\nu\\) BDM. In Fig. 1 , S, G and E are coplanar and \\(\\chi\\) is boosted at B on the SN \\(\\nu\\) shell. \\(d\\) is the distance \\(\\overline{\\mathsf{SB}}\\) , \\(\\ell\\) the distance \\(\\overline{\\mathsf{BE}}\\) , \\(R_s\\) the distance between SN and Earth and \\(R_e\\) the distance between GC and Earth. The DM number density at B is determined by \\(n_\\chi(r)\\) where \\(r\\) is the radial distance between GC and B. We adopt NFW profile [ 3 ] for \\(n_\\chi\\) , $$ \\begin{equation} n_\\chi(r)=\\frac{\\rho_s}{m_\\chi}\\frac{1}{\\frac{r}{r_s}(1+\\frac{r}{r_s})^2} \\end{equation} $$ where \\(\\rho_s=184\\) MeV cm \u22123 and \\(r_s=24.4\\) kpc. Due to its spherical symmetric nature, one does not need to know where the galactic plane lies. Unless S lies on the axis \\(\\overline{\\mathsf{GE}}\\) , BDM is not azimuthally symmetric around \\(\\varphi\\) . We refer \\(\\beta\\) as the off-center angle. It characterizes how SN deviates from GC in angular direction. It will be elaborated more in the API documents: Positioning and Coordinate Transformations . Particle kinematics \u00b6 When a \\(\\nu\\) carries energy \\(E_\\nu\\) and scatters with a static \\(\\chi\\) at B, DM will receive kinetic energy \\(T_\\chi\\) by $$ T_\\chi = \\frac{E_\\nu^2}{E_\\nu+m_\\chi/2}\\left(\\frac{1+\\cos\\theta_c}{2}\\right) $$ where \\(\\theta_c\\) is the scattering angle at center-of-mass (cm) frame (do not confuse with the \\(\\theta\\) in Fig. 1 ). Assuming \\(\\theta_c\\) uniformly distributes in \\([0,\\pi]\\) , we can relate it with lab frame scattering \\(\\psi\\) by $$ \\theta_c =2\\tan^{-1}(\\gamma \\tan\\psi) $$ where \\(\\psi\\in [0,\\pi/2]\\) and \\(\\gamma=(E_\\nu+m_\\chi)/\\sqrt{m_\\chi(2E_\\nu+m_\\chi)}\\) . Thus we have $$ \\begin{equation} \\frac{d\\sigma_{\\chi\\nu}}{d\\Omega_{\\rm lab}}=\\frac{1}{2\\pi}\\frac{d\\sigma_{\\chi\\nu}}{d\\cos\\psi}=\\sigma_0\\times g_\\chi(\\psi) \\end{equation} $$ where $$ \\begin{equation}\\label{eq:gx} g_\\chi(\\psi) = \\frac{\\gamma^2\\sec^3\\psi}{\\pi(1+\\gamma^2\\tan^2\\psi)^2} \\end{equation} $$ is the angular distribution for \\(\\chi\\nu\\) scattering cross section in lab frame. One can easily verify that Eq. \\(\\eqref{eq:gx}\\) satisfy $$ 2\\pi \\int_0^{\\pi/2} g_\\chi(\\psi) \\sin\\psi d\\psi =1 $$ and is independent of \\(\\gamma\\) . When \\(d\\) , \\(\\ell\\) and \\(R_s\\) are specified, one can determined \\(\\psi\\) by law of cosine $$ R_s^2 = d^2+\\ell^2-2d\\ell \\cos(\\pi-\\psi) $$ where $$ \\begin{equation}\\label{eq:geo_psi} \\psi =\\cos^{-1}\\left( \\frac{R_s^2-d^2-\\ell^2}{2d\\ell}\\right). \\end{equation} $$ Constraint by positive-definite \\(E_\\nu\\) \u00b6 Note that though the valid range of \\(\\psi\\) from Eq. \\(\\eqref{eq:geo_psi}\\) is in \\([0,\\pi]\\) but Eq. \\(\\eqref{eq:gx}\\) puts stronger constraint. As Eq. \\(\\eqref{eq:geo_psi}\\) is merely a geometrical relation but Eq. \\(\\eqref{eq:gx}\\) is required by the kinematics. However, \\([0,\\pi/2]\\) is simply the full range allowed by kinematics, if we examine further, we will find that the true valid range for \\(\\psi\\) is narrower. Let's consider the \\(\\chi\\nu\\) scattering in lab frame in Fig. 2 Figure 2. \\(\\chi\\nu\\) scattering in lab frame. We write down the four-momenta for each particle, \\[ \\begin{align*} p_{\\nu} & =(E_{\\nu},0,0,E_{\\nu}),\\\\ p_{\\chi} & =(m_{\\chi},0,0,0),\\\\ p_{\\nu}^{\\prime} & =(E_{\\nu}^{\\prime},x,y,z),\\\\ p_{\\chi}^{\\prime} & =(E_{\\chi},-|\\mathbf{p}_{\\chi}|\\sin\\psi,0,|\\mathbf{p}_{\\chi}|\\cos\\psi), \\end{align*} \\] where \\((x,y,z)\\) indicates their values are irrelevant. Relativistic mechanics implies that, assuming \\(m_\\nu=0\\) and the metric tensor \\(g_{\\mu\\nu}={\\rm diag}(1,-1,-1,-1)\\) , \\[ \\begin{align*} (p_\\nu-p_\\chi^\\prime)^2 &= (p_\\chi-p_\\nu^\\prime)^2, \\\\ m_\\chi^2 - 2E_\\nu (E_\\chi -|\\mathbf{p}_{\\chi}|\\cos\\psi) &= m_\\chi^2-2m_\\chi E_\\nu^\\prime. \\end{align*} \\] We can rewrite the last line by \\(E_\\chi = T_\\chi + m_\\chi\\) and \\(T_\\chi = E_\\nu - E_\\nu^\\prime\\) which results in \\[ \\begin{equation}\\label{eq:Ev} E_\\nu = \\frac{T_\\chi m_\\chi }{ |\\mathbf{p}_{\\chi}|\\cos\\psi - T_\\chi}. \\end{equation} \\] Once BDM kinetic energy \\(T_\\chi\\) and scattering angle \\(\\psi\\) at B are given, Eq. \\(\\eqref{eq:Ev}\\) specifies the required \\(E_\\nu\\) to possess such properties. Without ambiguity, \\(E_\\nu\\) is positive-definite and non-divergent, hence an even stronger constraint is put by \\[ \\begin{equation}\\label{eq:psi_max} |\\mathbf{p}_\\chi| \\cos\\psi - T_\\chi > 0 \\to\\psi < \\psi_{\\rm max}:= \\cos^{-1}\\left(\\frac{T_\\chi}{|\\mathbf{p}_{\\chi}|}\\right). \\end{equation} \\] It is also not hard to deduce that \\(|\\mathbf{p}_{\\chi}|=\\sqrt{T_\\chi ( T_\\chi+2m_\\chi )}\\) . Hence the realistic range for \\(\\psi\\) is $$ \\begin{equation} \\psi \\in [0,\\psi_{\\rm max}) \\end{equation} $$ while \\(E_\\nu\\) diverges at \\(\\psi=\\psi_{\\rm max}\\) . Moreover, we can differentiate Eq. \\(\\eqref{eq:Ev}\\) w.r.t. \\(T_\\chi\\) and obtain \\[ \\begin{equation}\\label{eq:dEv/dTx} \\frac{dE_\\nu}{dT_\\chi}=\\left(\\frac{ m_\\chi }{|\\mathbf{p}_{\\chi}|\\cos\\psi-T_\\chi }\\right)^2\\frac{T_\\chi}{|\\mathbf{p}_{\\chi}|}\\cos\\psi. \\end{equation} \\] This function will be useful later. Dark emissivity \u00b6 The key factor is determining how many \\(\\chi\\) s are boosted at B. This is generally characterized by the emissivity which has units of of cm \u22123 s \u22121 and of MeV \u22121 cm \u22123 s \u22121 in terms of energy spectrum. SN \\(\\nu\\) spectrum \u00b6 We begin by writing down the SN \\(\\nu\\) energy spectrum on the shell at \\(d\\) $$ \\begin{equation}\\label{eq:snv_spectrum} \\frac{dN_\\nu}{dE_\\nu} = \\sum_i \\frac{L_{\\nu_i}}{4\\pi d^2 \\langle E_{\\nu_i}\\rangle} f_{\\nu_i}(E_\\nu) \\end{equation} $$ where \\(L_{\\nu_i}=L_{\\rm tot}/6\\) is the luminosity for each neutrino ( \\(\\nu_{e,\\mu,\\tau}\\) and their anti-particles) and \\(f_{\\nu_i}(E_\\nu)\\) is the Fermi-Dirac distribution [ 4 ], $$ \\begin{equation} f_{\\nu_i}(E_\\nu) = \\frac{1}{F_2(\\eta_\\nu)}\\frac{1}{T_\\nu^3}\\frac{E_\\nu^2}{e^{E_\\nu/T_\\nu-\\eta_\\nu}+1} \\end{equation} $$ where $$ \\begin{equation} F_k(\\eta) = \\int_0^\\infty dx \\frac{x^k}{e^{x-\\eta}+1}. \\end{equation} $$ We list all the numerical values for the parameters mentioned above in Tab. 1 Parameters Values Parameters Values \\(\\langle E_{\\nu_e}\\rangle\\) 11 MeV \\(T_{\\nu_e}\\) 2.76 MeV \\(\\langle E_{\\bar{\\nu}_e}\\rangle\\) 16 MeV \\(T_{\\bar{\\nu}_e}\\) 4.01 MeV \\(\\langle E_{\\nu_x,\\bar{\\nu}_x}\\rangle\\) 25 MeV \\(T_{\\nu_x,\\bar{\\nu}_x}\\) 6.26 MeV \\(L_{\\rm tot}\\) \\(3\\times10^{52}\\) erg s \u22121 \\(\\eta_i\\) 3 Table 1. Numerical values for parameters. Suppose the duration of the SN explosion is around \\(\\tau_s=10\\) s, the total energy released in the form of neutrinos approximates \\(10^{53}\\) erg for individual explosion. Number density on the shell \u00b6 After converting erg to MeV, one can examine that Eq. \\(\\eqref{eq:snv_spectrum}\\) , after multiplying \\(\\tau_s\\) , has the unit MeV \u22121 cm \u22122 . Because \\(\\nu\\) travels at light speed, we can estimate the shell thickness by \\(h=c\\tau_s\\) . The SN \\(\\nu\\) shell would have a number density $$ \\begin{equation}\\label{eq:snv_nd} \\frac{dn_\\nu}{dE_\\nu} = \\frac{dN_\\nu}{dE_\\nu}\\frac{\\tau_s}{h}= \\sum_i \\frac{L_{\\nu_i}}{4\\pi d^2 \\langle E_{\\nu_i}\\rangle c} f_{\\nu_i}(E_\\nu). \\end{equation} $$ One can verify that \\(dn_\\nu/dE_\\nu\\) has MeV \u22121 cm \u22123 , which is exactly the energy spectrum of SN \\(\\nu\\) number density on the shell. By multiplying \\(E_\\nu\\) , one can eliminate MeV \u22121 and receives $$ n_\\nu =\\frac{E_\\nu}{c} \\frac{dN_\\nu}{dE_\\nu} $$ the SN \\(\\nu\\) number density. Emissivity on the shell \u00b6 To obtain emissivity \\(j_\\chi\\) at B on the SN \\(\\nu\\) shell, one simply do $$ j_\\chi := c n_\\nu n_\\chi \\frac{d\\sigma_{\\chi\\nu}}{d\\Omega_{\\rm lab}} $$ which has units of cm \u22123 s \u22121 sr \u22121 and sr \u22121 indicates per steradian. It would be more convenient to restore the energy spectrum form and translate it into \\(T_\\chi\\) expression, $$ \\begin{equation}\\label{eq:jx} j_\\chi(d,r,T_\\chi,\\psi) = cn_\\chi \\frac{dn_\\nu}{dE_\\nu} \\left(\\frac{1}{2\\pi}\\frac{d\\sigma_{\\chi\\nu}}{d\\cos\\psi}\\right)\\left(\\frac{dE_\\nu}{dT_\\chi}\\frac{v_\\chi}{c}\\right) \\end{equation} $$ where \\(dE_\\nu/dT_\\chi\\) is given in Eq. \\(\\eqref{eq:dEv/dTx}\\) . The above equation describes the BDM emissivity at any point on the shell and has a unit MeV \u22121 cm \u22123 s \u22121 sr \u22121 . SN \\(\\nu\\) BDM flux \u00b6 When the emissivity at any point is known, one can calculate the BDM flux at Earth by integrating \\(j_\\chi\\) over the ling-of-sight (l.o.s.) \\(\\ell\\) . Thus, cf. Figs. 1 and 3 , $$ \\begin{equation}\\label{eq:total_Phi} \\frac{d\\Phi_\\chi}{dT_\\chi d\\Omega}=\\int d\\ell ~ j_\\chi \\Theta(r_\\nu - d)\\Theta(d+h-r_\\nu) \\end{equation} $$ where \\(d\\Omega\\) is the field-of-view (f.o.v.) centering SN. The two \\(\\Theta\\) functions restrict \\(j_\\chi\\) is only non-zero within the shell. Without loss of generality, \\(h\\ll d\\) always holds such that $$ \\Theta(r_\\nu-d)\\Theta(d+h -r_\\nu)\\approx h \\delta(r_\\nu-d) =c\\tau_s \\delta(r_\\nu-d) $$ where \\(\\delta(x)\\) is the Dirac-delta function. Thus, Eq. \\(\\eqref{eq:total_Phi}\\) describes the total BDM flux that could be observed on the Earth. Note that \\(\\delta(r_\\nu-d)\\) actually carries [L \u22121 ] and cancels the dimension from \\(c\\tau_s\\) . This approximation remains dimensionless and is self-consistent. Figure 3. BDM production on the shell with thickness \\(h\\) at \\(d\\) distant to SN. When \\(\\ell\\) and \\(\\theta\\) are specified, \\(j_\\chi\\) is non-zero at \\(r_\\nu\\) only when \\(d\\leq r_\\nu\\leq d+h\\). From line-of-sight to time-dependency \u00b6 However, Eq. \\(\\eqref{eq:total_Phi}\\) is inadequate because it does not take DM velocity into account. Given massive DM, BDM cannot have the same velocity as SN \\(\\nu\\) . Depending on where \\(\\chi\\) is upscattered, it will arrive on Earth at different times. This results in a prolonged flux vs. time compared to the SN \\(\\nu\\) flux. BDM arrives earlier if it was upscattered closer and much later if it was upscattered farther away. To incorporate time-dependent feature, let the time of SN explosion be the time-zero. Then SN \\(\\nu\\) needs $$ t_\\nu = \\frac{R_s}{c} $$ to propagate from S to E. For BDM produced at B, it will arrive at $$ \\begin{equation}\\label{eq:tprime} t^\\prime = \\frac{d}{c} + \\frac{\\ell}{v_\\chi} \\end{equation} $$ where the first term accounts for SN \\(\\nu\\) traveling from S to B and the BDM velocity $$ v_\\chi =\\frac{\\sqrt{T_\\chi(T_\\chi+2m_\\chi )}}{T_\\chi+m_\\chi}c. $$ Applying law of cosine, we have $$ \\begin{equation}\\label{eq:d} d = \\sqrt{\\ell^2 + R_s^2 - 2\\ell R_s \\cos\\theta} \\end{equation} $$ and take total differentiation on both sides of Eq. \\(\\eqref{eq:tprime}\\) , $$ \\begin{equation}\\label{eq:dtprime} dt^\\prime =\\left( \\frac{\\ell - R_s \\cos\\theta}{c d} + \\frac{1}{v_\\chi} \\right) d\\ell := \\mathcal{J}^{-1}d\\ell. \\end{equation} $$ Note that \\(\\mathcal{J}\\) has the same dimension as velocity [L T \u22121 ]. Before recasting Eq. \\(\\eqref{eq:total_Phi}\\) into time-dependent form, we firstly manage $$ c\\tau_s \\delta(r_\\nu-d) = \\tau_s \\delta\\left(\\frac{r_\\nu}{c}- \\frac{d}{c}\\right) = \\tau_s\\delta\\left(\\frac{r_\\nu}{c}- t^\\prime +\\frac{\\ell}{v_\\chi}\\right)=\\tau_s\\delta\\left(t^\\prime - \\frac{r_\\nu}{c}-\\frac{\\ell}{v_\\chi}\\right) $$ by \\(\\delta(ax)=\\delta(x)/|a|\\) . Using thin-shell approximation, \\(h\\ll d\\) , we approximate $$ d \\leq r_\\nu \\leq d+h \\approx 1 \\leq \\frac{r_\\nu}{d} \\leq 1+\\frac{h}{d} \\to r_\\nu\\approx d. $$ The \\(\\delta\\) -function becomes $$ c\\tau_s\\delta(r_\\nu-d) \\approx \\tau_s\\delta \\left(t^\\prime - \\frac{d}{c}-\\frac{\\ell}{v_\\chi} \\right). $$ Hence we can recast Eq. \\(\\eqref{eq:total_Phi}\\) from l.o.s. integration into time integration \\[ \\frac{d\\Phi_\\chi}{dT_\\chi d\\Omega} = \\tau_s \\int dt^\\prime \\mathcal{J} j_\\chi \\delta \\left(t^\\prime - \\frac{d}{c}-\\frac{\\ell}{v_\\chi} \\right) = \\left. \\tau_s\\mathcal{J} j_\\chi \\right|_{t^\\prime = \\frac{d}{c}+\\frac{\\ell}{v_\\chi}}. \\] In the last step, the \\(\\delta\\) function restricts the integrand to be non-zero at \\(t^\\prime = d/c+\\ell/v_\\chi\\) . Finally, we integrate over the f.o.v. from the viewpoint on Earth, \\[ \\begin{equation}\\label{eq:BDM_flux} \\frac{d\\Phi_\\chi(t^\\prime)}{dT_\\chi} = \\left. \\tau_s\\int_0^{2\\pi} d\\varphi \\int_0^{\\pi/2} d\\theta~\\sin\\theta\\mathcal{J} j_\\chi (d,r,T_\\chi,\\psi) \\right|_{t^\\prime = \\frac{d}{c}+\\frac{\\ell}{v_\\chi}} \\end{equation} \\] which is the time-dependent SN \\(\\boldsymbol{\\nu}\\) BDM flux at Earth. One last thing is to check the dimension, $$ \\left[\\tau_s \\times d\\varphi d\\theta \\sin\\theta \\times \\mathcal{J} \\times j_\\chi \\right] = {\\rm s}\\cdot{\\rm sr}\\cdot\\frac{\\rm cm}{\\rm s} \\cdot \\frac{1}{\\rm MeV~cm^3~s~sr}= {\\rm MeV^{-1}~cm^{-2}~s^{-1}} $$ that shows Eq. \\(\\eqref{eq:BDM_flux}\\) has the same unit as flux per energy width. Instead of setting time-zero for \\(t^\\prime\\) as the SN explosion, for our convenience, we can shift it by \\(t_\\nu\\) , $$ \\begin{equation}\\label{eq:t} t := t^\\prime - t_\\nu = \\frac{d}{c} + \\frac{\\ell}{v_\\chi} - t_\\nu \\end{equation} $$ and this offsets the time-zero to the arrival of SN \\(\\nu\\) at Earth, \\[ \\begin{equation}\\label{eq:BDM_flux_earth} \\frac{d\\Phi_\\chi(t)}{dT_\\chi} = \\left. \\tau_s\\int_0^{2\\pi} d\\varphi \\int_0^{\\pi/2} d\\theta~\\sin\\theta\\mathcal{J} j_\\chi (d,r,T_\\chi,\\psi) \\right|_{t = \\frac{d}{c}+\\frac{\\ell}{v_\\chi}-t_\\nu}. \\end{equation} \\] Time-dependent feature \u00b6 Judging by Eq. \\(\\eqref{eq:BDM_flux_earth}\\) , it is easy to realize that the BDM flux from an individual SN is not everlasting. The last bit of signal comes from the BDM with maximum propagation time. Hence we define a vanishing time, $$ t_{\\rm van} = \\max \\left[ \\frac{d(\\theta)}{c} + \\frac{\\ell(\\theta)}{v_\\chi} - t_\\nu\\right]. $$ Using law of sine, cf. Fig. 1 , $$ \\frac{\\ell}{\\sin(\\psi-\\theta)}=\\frac{d}{\\sin\\theta}=\\frac{R_s}{\\sin\\psi} $$ then $$ \\begin{equation}\\label{eq:t_psi} t =\\frac{R_s}{c}\\frac{\\sin\\theta}{\\sin\\psi}+\\frac{R_s}{v_\\chi}\\frac{\\sin(\\psi-\\theta)} {\\sin\\psi}-t_\\nu. \\end{equation} $$ Obviously, when we fix \\(\\theta\\) in Eq. \\(\\eqref{eq:t_psi}\\) , \\(t\\) increases monotonically with \\(\\psi \\in [0,\\pi/2]\\) . Thus to find the corresponding \\(\\theta\\) that maximizes \\(t\\) globally, we restrict ourselves at \\(\\psi=\\psi_{\\rm max}\\) , cf. Eq. \\(\\eqref{eq:psi_max}\\) , which only depends on \\(T_\\chi\\) and \\(m_\\chi\\) . Hence we can do \\(dt/d\\theta=0\\) and obtain $$ \\begin{equation}\\label{eq:theta_maximum_t} \\frac{\\cos\\theta}{c}=\\frac{\\cos(\\psi_{\\rm max}-\\theta)}{v_\\chi}. \\end{equation} $$ It can be solved numerically for \\(\\theta\\) . Suppose \\(\\theta_{\\rm MAX}\\) satisfy Eq. \\(\\eqref{eq:theta_maximum_t}\\) , then we have \\[ \\begin{equation}\\label{eq:tvan} t_{\\rm van} = \\frac{d(\\theta_{\\rm MAX})}{c} + \\frac{\\ell(\\theta_{\\rm MAX})}{v_\\chi} - t_\\nu. \\end{equation} \\] We note that Eq. \\(\\eqref{eq:tvan}\\) is the exact solution for \\(t_{\\rm van}\\) and valid for both relativistic and non-relativistic cases. However, an approximation given by Eq. (13) in Ref. [ 2 ] is only suitable for relativistic case. Field-of-view across the sky \u00b6 One can understand from the last subsection that \\(\\theta_{\\rm MAX}\\) dictates the largest f.o.v. at \\(t_{\\rm van}\\) . Now we can do it the other way around that by giving a particular time \\(t^* < t_{\\rm van}\\) . The \\(\\theta^*_M\\) that satisfies Eq. \\(\\eqref{eq:t_psi}\\) , \\[ \\begin{equation} t^* = \\frac{R_s}{c}\\frac{\\sin\\theta^*_M}{\\sin\\psi_{\\rm max}} + \\frac{R_s}{v_\\chi}\\frac{\\sin(\\psi_{\\rm max}-\\theta_M^*)}{\\sin\\psi_{\\rm max}}-t_\\nu \\end{equation} \\] corresponds the maximum f.o.v. at \\(t=t^*\\) . Thus we conclude that at any specific time, the f.o.v. that contains non-zero BDM flux distributes across $$ \\begin{equation} \\theta \\in [0,\\theta^*_M). \\end{equation} $$ References \u00b6 Y.-H. Lin et al. , Phys. Rev. Lett. 130 , 111002 (2023) Y.-H. Lin et al. , Phys. Rev. D. 108 , 083013 (2023) J. F. Navarro et al. , Astrophys. J. 462 , 563 (1996) H. Duan et al. , Phys. Rev. D 74 , 105014 (2006)","title":"BDM Physics"},{"location":"manual/overview/#bdm-physics","text":"We review all the details provided in Refs. [ 1 , 2 ]. While these papers present mathematical expressions suitable for general readers, the content in this section is tailored for programming purposes. The goal of this document is not to replace Refs. [ 1 , 2 ] but to bridge the gap between traditional journal writing and the technical details required for programming. Typos and misinformation are corrected here to ensure clarity and facilitate understanding of the subsequent Python code.","title":"BDM Physics"},{"location":"manual/overview/#general-picture","text":"Given non-zero cross section between DM ( \\(\\chi\\) ) and neutrino ( \\(\\nu\\) ), it is expected that when SN \\(\\nu\\) could scatter with halo \\(\\chi\\) when propagating outward from the explosion site. We display the general scheme in Fig. 1 . In this figure, SN, galactic center (GC) and Earth are denoted as S, G and E respectively. Figure 1. The 3D scheme for SN\\(\\nu\\) BDM. In Fig. 1 , S, G and E are coplanar and \\(\\chi\\) is boosted at B on the SN \\(\\nu\\) shell. \\(d\\) is the distance \\(\\overline{\\mathsf{SB}}\\) , \\(\\ell\\) the distance \\(\\overline{\\mathsf{BE}}\\) , \\(R_s\\) the distance between SN and Earth and \\(R_e\\) the distance between GC and Earth. The DM number density at B is determined by \\(n_\\chi(r)\\) where \\(r\\) is the radial distance between GC and B. We adopt NFW profile [ 3 ] for \\(n_\\chi\\) , $$ \\begin{equation} n_\\chi(r)=\\frac{\\rho_s}{m_\\chi}\\frac{1}{\\frac{r}{r_s}(1+\\frac{r}{r_s})^2} \\end{equation} $$ where \\(\\rho_s=184\\) MeV cm \u22123 and \\(r_s=24.4\\) kpc. Due to its spherical symmetric nature, one does not need to know where the galactic plane lies. Unless S lies on the axis \\(\\overline{\\mathsf{GE}}\\) , BDM is not azimuthally symmetric around \\(\\varphi\\) . We refer \\(\\beta\\) as the off-center angle. It characterizes how SN deviates from GC in angular direction. It will be elaborated more in the API documents: Positioning and Coordinate Transformations .","title":"General picture"},{"location":"manual/overview/#dark-emissivity","text":"The key factor is determining how many \\(\\chi\\) s are boosted at B. This is generally characterized by the emissivity which has units of of cm \u22123 s \u22121 and of MeV \u22121 cm \u22123 s \u22121 in terms of energy spectrum.","title":"Dark emissivity"},{"location":"manual/overview/#snnu-bdm-flux","text":"When the emissivity at any point is known, one can calculate the BDM flux at Earth by integrating \\(j_\\chi\\) over the ling-of-sight (l.o.s.) \\(\\ell\\) . Thus, cf. Figs. 1 and 3 , $$ \\begin{equation}\\label{eq:total_Phi} \\frac{d\\Phi_\\chi}{dT_\\chi d\\Omega}=\\int d\\ell ~ j_\\chi \\Theta(r_\\nu - d)\\Theta(d+h-r_\\nu) \\end{equation} $$ where \\(d\\Omega\\) is the field-of-view (f.o.v.) centering SN. The two \\(\\Theta\\) functions restrict \\(j_\\chi\\) is only non-zero within the shell. Without loss of generality, \\(h\\ll d\\) always holds such that $$ \\Theta(r_\\nu-d)\\Theta(d+h -r_\\nu)\\approx h \\delta(r_\\nu-d) =c\\tau_s \\delta(r_\\nu-d) $$ where \\(\\delta(x)\\) is the Dirac-delta function. Thus, Eq. \\(\\eqref{eq:total_Phi}\\) describes the total BDM flux that could be observed on the Earth. Note that \\(\\delta(r_\\nu-d)\\) actually carries [L \u22121 ] and cancels the dimension from \\(c\\tau_s\\) . This approximation remains dimensionless and is self-consistent. Figure 3. BDM production on the shell with thickness \\(h\\) at \\(d\\) distant to SN. When \\(\\ell\\) and \\(\\theta\\) are specified, \\(j_\\chi\\) is non-zero at \\(r_\\nu\\) only when \\(d\\leq r_\\nu\\leq d+h\\).","title":"SN\\(\\nu\\) BDM flux"}]}